.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.01 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 2024-07-15 "version 1.36.1" busybox
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH SYNTAX
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common UNIX utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in GNU coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured GNU cousins; however, the
options that are included provide the expected functionality and behave very
much like their GNU counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete POSIX environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by CONFIG_PREFIX. CONFIG_PREFIX can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by CONFIG_PREFIX.
.SH USAGE
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the CONFIG_FEATURE_VERBOSE_USAGE option has
been enabled, more detailed usage information will also be available.
.SH COMMANDS
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 10
\&        [, [[, addgroup, adduser, ar, arch, arp, arping, ascii, ash, awk,
\&        base32, base64, basename, bc, blkid, bunzip2, bzcat, cat, chattr,
\&        chgrp, chmod, chown, chroot, chrt, chvt, cksum, clear, cmp, cp,
\&        cpio, crc32, crond, crontab, cut, date, dc, dd, deallocvt, delgroup,
\&        deluser, devmem, df, diff, dirname, dmesg, dnsd, dnsdomainname,
\&        dos2unix, du, dumpkmap, echo, egrep, eject, env, ether\-wake, expr,
\&        factor, fallocate, false, fbset, fdflush, fdformat, fdisk, fgrep,
\&        find, flock, fold, free, freeramdisk, fsck, fsfreeze, fstrim, fuser,
\&        getopt, getty, grep, gunzip, gzip, halt, hdparm, head, hexdump,
\&        hexedit, hostid, hostname, hwclock, i2cdetect, i2cdump, i2cget,
\&        i2cset, i2ctransfer, id, ifconfig, ifdown, ifup, inetd, init,
\&        insmod, install, ip, ipaddr, ipcrm, ipcs, iplink, ipneigh, iproute,
\&        iprule, iptunnel, kill, killall, killall5, klogd, last, less, link,
\&        linux32, linux64, linuxrc, ln, loadfont, loadkmap, logger, login,
\&        logname, losetup, ls, lsattr, lsmod, lsof, lspci, lsscsi, lsusb,
\&        lzcat, lzma, lzopcat, makedevs, md5sum, mdev, mesg, microcom, mim,
\&        mkdir, mkdosfs, mke2fs, mkfifo, mknod, mkpasswd, mkswap, mktemp,
\&        modprobe, more, mount, mountpoint, mt, mv, nameif, netstat, nice,
\&        nl, nohup, nologin, nproc, nslookup, nuke, od, openvt, partprobe,
\&        passwd, paste, patch, pidof, ping, pipe_progress, pivot_root,
\&        poweroff, printenv, printf, ps, pwd, rdate, readlink, readprofile,
\&        realpath, reboot, renice, reset, resize, resume, rm, rmdir, rmmod,
\&        route, run\-init, run\-parts, runlevel, sed, seedrng, seq, setarch,
\&        setconsole, setfattr, setkeycodes, setlogcons, setpriv, setserial,
\&        setsid, sh, sha1sum, sha256sum, sha3sum, sha512sum, shred, sleep,
\&        sort, start\-stop\-daemon, strings, stty, su, sulogin, svc, svok,
\&        swapoff, swapon, switch_root, sync, sysctl, syslogd, tail, tar, tee,
\&        telnet, test, tftp, time, top, touch, tr, traceroute, tree, true,
\&        truncate, ts, tsort, tty, ubirename, udhcpc, uevent, umount, uname,
\&        uniq, unix2dos, unlink, unlzma, unlzop, unxz, unzip, uptime, usleep,
\&        uudecode, uuencode, vconfig, vi, vlock, w, watch, watchdog, wc,
\&        wget, which, who, whoami, xargs, xxd, xz, xzcat, yes, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP \fBaddgroup\fR 4
.IX Item "addgroup"
addgroup [\-g GID] [\-S] GROUP
.Sp
Add a group
.Sp
.Vb 2
\&        \-g GID  Group id
\&        \-S      Create a system group
.Ve
.IP \fBadduser\fR 4
.IX Item "adduser"
adduser [OPTIONS] USER [GROUP]
.Sp
Create new user, or add USER to GROUP
.Sp
.Vb 9
\&        \-h DIR          Home directory
\&        \-g GECOS        GECOS field
\&        \-s SHELL        Login shell
\&        \-G GRP          Group
\&        \-S              Create a system user
\&        \-D              Don\*(Aqt assign a password
\&        \-H              Don\*(Aqt create home directory
\&        \-u UID          User id
\&        \-k SKEL         Skeleton directory (/etc/skel)
.Ve
.IP \fBar\fR 4
.IX Item "ar"
ar x|p|t|r [\-ov] ARCHIVE [FILE]...
.Sp
Extract or list FILEs from an ar archive, or create it
.Sp
.Vb 6
\&        x       Extract
\&        p       Extract to stdout
\&        t       List
\&        r       Create
\&        \-o      Restore mtime
\&        \-v      Verbose
.Ve
.IP \fBarch\fR 4
.IX Item "arch"
arch
.Sp
Print system architecture
.IP \fBarp\fR 4
.IX Item "arp"
arp 
[\-vn]	[\-H HWTYPE] [\-i IF] \-a [HOSTNAME]
[\-v]		    [\-i IF] \-d HOSTNAME [pub]
[\-v]	[\-H HWTYPE] [\-i IF] \-s HOSTNAME HWADDR [temp]
[\-v]	[\-H HWTYPE] [\-i IF] \-s HOSTNAME HWADDR [netmask MASK] pub
[\-v]	[\-H HWTYPE] [\-i IF] \-Ds HOSTNAME IFACE [netmask MASK] pub
.Sp
Manipulate ARP cache
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-d              Delete ARP entry
\&        \-s              Set new entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read HWADDR from IFACE
\&        \-A,\-p AF        Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP \fBarping\fR 4
.IX Item "arping"
arping [\-fqbDUA] [\-c CNT] [\-w TIMEOUT] [\-I IFACE] [\-s SRC_IP] DST_IP
.Sp
Send ARP requests/replies
.Sp
.Vb 11
\&        \-f              Quit on first ARP reply
\&        \-q              Quiet
\&        \-b              Keep broadcasting, don\*(Aqt go unicast
\&        \-D              Exit with 1 if DST_IP replies
\&        \-U              Unsolicited ARP mode, update your neighbors
\&        \-A              ARP answer mode, update your neighbors
\&        \-c N            Stop after sending N ARP requests
\&        \-w TIMEOUT      Seconds to wait for ARP reply
\&        \-I IFACE        Interface to use (default eth0)
\&        \-s SRC_IP       Sender IP address
\&        DST_IP          Target IP address
.Ve
.IP \fBash\fR 4
.IX Item "ash"
ash [\-il] [\-|+Cabefmnuvx] [\-|+o OPT]... [\-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | \-s ARGS]
.Sp
Unix shell interpreter
.IP \fBawk\fR 4
.IX Item "awk"
awk [OPTIONS] [AWK_PROGRAM] [FILE]...
.Sp
.Vb 4
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
\&        \-e AWK_PROGRAM
.Ve
.IP \fBbase32\fR 4
.IX Item "base32"
base32 [\-d] [\-w COL] [FILE]
.Sp
Base32 encode or decode FILE to standard output
.Sp
.Vb 2
\&        \-d      Decode data
\&        \-w COL  Wrap lines at COL (default 76, 0 disables)
.Ve
.IP \fBbase64\fR 4
.IX Item "base64"
base64 [\-d] [\-w COL] [FILE]
.Sp
Base64 encode or decode FILE to standard output
.Sp
.Vb 2
\&        \-d      Decode data
\&        \-w COL  Wrap lines at COL (default 76, 0 disables)
.Ve
.IP \fBbasename\fR 4
.IX Item "basename"
basename FILE [SUFFIX] | \-a FILE... | \-s SUFFIX FILE...
.Sp
Strip directory path and SUFFIX from FILE
.Sp
.Vb 2
\&        \-a              All arguments are FILEs
\&        \-s SUFFIX       Remove SUFFIX (implies \-a)
.Ve
.IP \fBbc\fR 4
.IX Item "bc"
bc [\-sqlw] [FILE]...
.Sp
Arbitrary precision calculator
.Sp
.Vb 4
\&        \-q      Quiet
\&        \-l      Load standard library
\&        \-s      Be POSIX compatible
\&        \-w      Warn if extensions are used
.Ve
.Sp
\&\f(CW$BC_LINE_LENGTH\fR changes output width
.IP \fBblkid\fR 4
.IX Item "blkid"
blkid [BLOCKDEV]...
.Sp
Print UUIDs of all filesystems
.IP \fBbunzip2\fR 4
.IX Item "bunzip2"
bunzip2 [\-cfk] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBbzcat\fR 4
.IX Item "bzcat"
bzcat [FILE]...
.Sp
Decompress to stdout
.IP \fBcat\fR 4
.IX Item "cat"
cat [\-nbvteA] [FILE]...
.Sp
Print FILEs to stdout
.Sp
.Vb 6
\&        \-n      Number output lines
\&        \-b      Number nonempty lines
\&        \-v      Show nonprinting characters as ^x or M\-x
\&        \-t      ...and tabs as ^I
\&        \-e      ...and end lines with $
\&        \-A      Same as \-vte
.Ve
.IP \fBchattr\fR 4
.IX Item "chattr"
chattr [\-R] [\-v VERSION] [\-p PROJID] [\-+=AacDdijsStTu] FILE...
.Sp
Change ext2 file attributes
.Sp
.Vb 4
\&        \-R      Recurse
\&        \-v NUM  Set version/generation number
\&        \-p NUM  Set project number
\&Modifiers:
\&
\&        \-,+,=   Remove/add/set attributes
\&Attributes:
\&
\&        A       No atime
\&        a       Append only
\&        C       No copy\-on\-write
\&        c       Compressed
\&        D       Synchronous dir updates
\&        d       Don\*(Aqt backup with dump
\&        E       Encrypted
\&        e       File uses extents
\&        F       Case\-insensitive dir
\&        I       Indexed dir
\&        i       Immutable
\&        j       Write data to journal first
\&        N       File is stored in inode
\&        P       Hierarchical project ID dir
\&        S       Synchronous file updates
\&        s       Zero storage when deleted
\&        T       Top of dir hierarchy
\&        t       Don\*(Aqt tail\-merge with other files
\&        u       Allow undelete
\&        V       Verity
.Ve
.IP \fBchgrp\fR 4
.IX Item "chgrp"
chgrp [\-RhLHPcvf]... GROUP FILE...
.Sp
Change the group membership of FILEs to GROUP
.Sp
.Vb 8
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP \fBchmod\fR 4
.IX Item "chmod"
chmod [\-Rcvf] MODE[,MODE]... FILE...
.Sp
MODE is octal number (bit pattern sstrwxrwxrwx) or [ugoa]{+|\-|=}[rwxXst]
.Sp
.Vb 4
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP \fBchown\fR 4
.IX Item "chown"
chown [\-RhLHPcvf]... USER[:[GRP]] FILE...
.Sp
Change the owner and/or group of FILEs to USER and/or GRP
.Sp
.Vb 8
\&        \-h      Affect symlinks instead of symlink targets
\&        \-L      Traverse all symlinks to directories
\&        \-H      Traverse symlinks on command line only
\&        \-P      Don\*(Aqt traverse symlinks (default)
\&        \-R      Recurse
\&        \-c      List changed files
\&        \-v      Verbose
\&        \-f      Hide errors
.Ve
.IP \fBchroot\fR 4
.IX Item "chroot"
chroot NEWROOT [PROG ARGS]
.Sp
Run PROG with root directory set to NEWROOT
.IP \fBchrt\fR 4
.IX Item "chrt"
chrt \-m | \-p [PRIO] PID | [\-rfobi] PRIO PROG ARGS
.Sp
Change scheduling priority and class for a process
.Sp
.Vb 7
\&        \-m      Show min/max priorities
\&        \-p      Operate on PID
\&        \-r      Set SCHED_RR class
\&        \-f      Set SCHED_FIFO class
\&        \-o      Set SCHED_OTHER class
\&        \-b      Set SCHED_BATCH class
\&        \-i      Set SCHED_IDLE class
.Ve
.IP \fBchvt\fR 4
.IX Item "chvt"
chvt N
.Sp
Change the foreground virtual terminal to /dev/ttyN
.IP \fBcksum\fR 4
.IX Item "cksum"
cksum FILE...
.Sp
Calculate CRC32 checksum of FILEs
.IP \fBclear\fR 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP \fBcmp\fR 4
.IX Item "cmp"
cmp [\-ls] [\-n NUM] FILE1 [FILE2 [SKIP1 [SKIP2]]]
.Sp
Compare FILE1 with FILE2 (or stdin)
.Sp
.Vb 4
\&        \-l      Write the byte numbers (decimal) and values (octal)
\&                for all differing bytes
\&        \-s      Quiet
\&        \-n NUM  Compare at most NUM bytes
.Ve
.IP \fBcp\fR 4
.IX Item "cp"
cp [\-arPLHpfinlsTu] SOURCE DEST
or: cp [\-arPLHpfinlsu] SOURCE... { \-t DIRECTORY | DIRECTORY }
.Sp
Copy SOURCEs to DEST
.Sp
.Vb 10
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-n      Don\*(Aqt overwrite
\&        \-l,\-s   Create (sym)links
\&        \-T      Refuse to copy if DEST is a directory
\&        \-t DIR  Copy all SOURCEs into DIR
\&        \-u      Copy only newer files
.Ve
.IP \fBcpio\fR 4
.IX Item "cpio"
cpio [\-dmvu] [\-F FILE] [\-R USER[:GRP]] [\-ti] [EXTR_FILE]...
.Sp
Extract (\-i) or list (\-t) files from a cpio archive
.Sp
Main operation mode:
.Sp
.Vb 3
\&        \-t      List
\&        \-i      Extract EXTR_FILEs (or all)
\&Options:
\&
\&        \-d      Make leading directories
\&        \-m      Restore mtime
\&        \-v      Verbose
\&        \-u      Overwrite
\&        \-F FILE Input (\-t,\-i,\-p) or output (\-o) file
\&        \-R USER[:GRP]   Set owner of created files
\&        \-L      Dereference symlinks
\&        \-0      NUL terminated input
.Ve
.IP \fBcrc32\fR 4
.IX Item "crc32"
crc32 FILE...
.Sp
Calculate CRC32 checksum of FILEs
.IP \fBcrond\fR 4
.IX Item "crond"
crond [\-fbS] [\-l N] [\-L LOGFILE] [\-c DIR]
.Sp
.Vb 6
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l N    Set log level. Most verbose 0, default 8
\&        \-L FILE Log to FILE
\&        \-c DIR  Cron dir. Default:/var/spool/cron/crontabs
.Ve
.IP \fBcrontab\fR 4
.IX Item "crontab"
crontab [\-c DIR] [\-u USER] [\-ler]|[FILE]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP \fBcut\fR 4
.IX Item "cut"
cut [OPTIONS] [FILE]...
.Sp
Print selected fields from FILEs to stdout
.Sp
.Vb 9
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d SEP  Field delimiter for input (default \-f TAB, \-F run of whitespace)
\&        \-O SEP  Field delimeter for output (default = \-d for \-f, one space for \-F)
\&        \-D      Don\*(Aqt sort/collate sections or match \-fF lines without delimeter
\&        \-f LIST Print only these fields (\-d is single char)
\&        \-F LIST Print only these fields (\-d is regex)
\&        \-s      Output only lines containing delimiter
\&        \-n      Ignored
.Ve
.IP \fBdate\fR 4
.IX Item "date"
date [OPTIONS] [+FMT] [[\-s] TIME]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 8
\&        \-u              Work in UTC (don\*(Aqt convert to local time)
\&        [\-s] TIME       Set time to TIME
\&        \-d TIME         Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          FMT (strptime format) for \-s/\-d TIME conversion
\&        \-r FILE         Display last modification time of FILE
\&        \-R              Output RFC\-2822 date
\&        \-I[SPEC]        Output ISO\-8601 date
\&                        SPEC=date (default), hours, minutes, seconds or ns
.Ve
.Sp
Recognized TIME formats:
.Sp
.Vb 6
\&        @seconds_since_1970
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP \fBdc\fR 4
.IX Item "dc"
dc [\-x] [\-eSCRIPT]... [\-fFILE]... [FILE]...
.Sp
Tiny RPN calculator. Operations:
Arithmetic: + \- * / % ^
~ \- divide with remainder
| \- modular exponentiation
v \- square root
p \- print top of the stack without popping
f \- print entire stack
k \- pop the value and set precision
i \- pop the value and set input radix
o \- pop the value and set output radix
Examples: dc \-e'2 2 + p' \-> 4, dc \-e'8 8 * 2 2 + / p' \-> 16
.IP \fBdd\fR 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [ibs=N obs=N/bs=N] [count=N] [skip=N] [seek=N]
	[conv=notrunc|noerror|sync|fsync]
	[iflag=skip_bytes|count_bytes|fullblock|direct] [oflag=seek_bytes|append|direct]
.Sp
Copy a file with converting and formatting
.Sp
.Vb 10
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        ibs=N           Read N bytes at a time
\&        obs=N           Write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
\&        conv=notrunc    Don\*(Aqt truncate output file
\&        conv=noerror    Continue after read errors
\&        conv=sync       Pad blocks with zeros
\&        conv=fsync      Physically write data out before finishing
\&        conv=swab       Swap every pair of bytes
\&        iflag=skip_bytes        skip=N is in bytes
\&        iflag=count_bytes       count=N is in bytes
\&        oflag=seek_bytes        seek=N is in bytes
\&        iflag=direct    O_DIRECT input
\&        oflag=direct    O_DIRECT output
\&        iflag=fullblock Read full blocks
\&        oflag=append    Open output in append mode
\&        status=noxfer   Suppress rate output
\&        status=none     Suppress all output
.Ve
.Sp
N may be suffixed by c (1), w (2), b (512), kB (1000), k (1024), MB, M, GB, G
.IP \fBdeallocvt\fR 4
.IX Item "deallocvt"
deallocvt [N]
.Sp
Deallocate unused virtual terminal /dev/ttyN
.IP \fBdelgroup\fR 4
.IX Item "delgroup"
delgroup GROUP
.Sp
Delete group GROUP from the system
.IP \fBdeluser\fR 4
.IX Item "deluser"
deluser [\-\-remove\-home] USER
.Sp
Delete USER from the system
.IP \fBdevmem\fR 4
.IX Item "devmem"
devmem ADDRESS [WIDTH [VALUE]]
.Sp
Read/write from physical address
.Sp
.Vb 3
\&        ADDRESS Address to act upon
\&        WIDTH   Width (8/16/...)
\&        VALUE   Data to be written
.Ve
.IP \fBdf\fR 4
.IX Item "df"
df [\-PkmhT] [\-t TYPE] [FILESYSTEM]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 6
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-T      Print filesystem type
\&        \-t TYPE Print only mounts of this type
.Ve
.IP \fBdiff\fR 4
.IX Item "diff"
diff [\-abBdiNqrTstw] [\-L LABEL] [\-S FILE] [\-U LINES] FILE1 FILE2
.Sp
Compare files line by line and output the differences between them.
This implementation supports unified diffs only.
.Sp
.Vb 10
\&        \-a      Treat all files as text
\&        \-b      Ignore changes in the amount of whitespace
\&        \-B      Ignore changes whose lines are all blank
\&        \-d      Try hard to find a smaller set of changes
\&        \-i      Ignore case differences
\&        \-L      Use LABEL instead of the filename in the unified header
\&        \-N      Treat absent files as empty
\&        \-q      Output only whether files differ
\&        \-r      Recurse
\&        \-S      Start with FILE when comparing directories
\&        \-T      Make tabs line up by prefixing a tab when necessary
\&        \-s      Report when two files are the same
\&        \-t      Expand tabs to spaces in output
\&        \-U      Output LINES lines of context
\&        \-w      Ignore all whitespace
.Ve
.IP \fBdirname\fR 4
.IX Item "dirname"
dirname FILENAME
.Sp
Strip non-directory suffix from FILENAME
.IP \fBdmesg\fR 4
.IX Item "dmesg"
dmesg [\-cr] [\-n LEVEL] [\-s SIZE]
.Sp
Print or control the kernel ring buffer
.Sp
.Vb 4
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
\&        \-r              Print raw message buffer
.Ve
.IP \fBdnsd\fR 4
.IX Item "dnsd"
dnsd [\-dvs] [\-c CONFFILE] [\-t TTL_SEC] [\-p PORT] [\-i ADDR]
.Sp
Small static DNS server daemon
.Sp
.Vb 10
\&        \-c FILE Config file
\&        \-t SEC  TTL
\&        \-p PORT Listen on PORT
\&        \-i ADDR Listen on ADDR
\&        \-d      Daemonize
\&        \-v      Verbose
\&        \-s      Send successful replies only. Use this if you want
\&                to use /etc/resolv.conf with two nameserver lines:
\&                        nameserver DNSD_SERVER
\&                        nameserver NORMAL_DNS_SERVER
.Ve
.IP \fBdos2unix\fR 4
.IX Item "dos2unix"
dos2unix [\-ud] [FILE]
.Sp
Convert FILE in-place from DOS to Unix format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP \fBdu\fR 4
.IX Item "du"
du [\-aHLdclsxhmk] [FILE]...
.Sp
Summarize disk space used for FILEs (or directories)
.Sp
.Vb 12
\&        \-a      Show file sizes too
\&        \-b      Apparent size (including holes)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-d N    Limit output to directories (and files with \-a) of depth < N
\&        \-c      Show grand total
\&        \-l      Count sizes many times if hard linked
\&        \-s      Display only a total for each argument
\&        \-x      Skip directories on different filesystems
\&        \-h      Sizes in human readable format (e.g., 1K 243M 2G)
\&        \-m      Sizes in megabytes
\&        \-k      Sizes in kilobytes (default)
.Ve
.IP \fBdumpkmap\fR 4
.IX Item "dumpkmap"
dumpkmap > keymap
.Sp
Print a binary keyboard translation table to stdout
.IP \fBecho\fR 4
.IX Item "echo"
echo [\-neE] [ARG]...
.Sp
Print ARGs to stdout
.Sp
.Vb 3
\&        \-n      No trailing newline
\&        \-e      Interpret backslash escapes (\et=tab etc)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP \fBeject\fR 4
.IX Item "eject"
eject [\-t] [\-T] [DEVICE]
.Sp
Eject DEVICE or default /dev/cdrom
.Sp
.Vb 2
\&        \-t      Close tray
\&        \-T      Open/close tray (toggle)
.Ve
.IP \fBenv\fR 4
.IX Item "env"
env [\-i0] [\-u NAME]... [\-] [NAME=VALUE]... [PROG ARGS]
.Sp
Print current environment or run PROG after setting up environment
.Sp
.Vb 3
\&        \-, \-i   Start with empty environment
\&        \-0      NUL terminated output
\&        \-u NAME Remove variable from environment
.Ve
.IP \fBether-wake\fR 4
.IX Item "ether-wake"
ether-wake [\-b] [\-i IFACE] [\-p aa:bb:cc:dd[:ee:ff]/a.b.c.d] MAC
.Sp
Send a magic packet to wake up sleeping machines.
MAC must be a station address (00:11:22:33:44:55) or
a hostname with a known 'ethers' entry.
.Sp
.Vb 3
\&        \-b              Broadcast the packet
\&        \-i IFACE        Interface to use (default eth0)
\&        \-p PASSWORD     Append four or six byte PASSWORD to the packet
.Ve
.IP \fBexpr\fR 4
.IX Item "expr"
expr EXPRESSION
.Sp
Print the value of EXPRESSION
.Sp
EXPRESSION may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LEN   Substring of STRING, POS counts from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP \fBfactor\fR 4
.IX Item "factor"
factor [NUMBER]...
.Sp
Print prime factors
.IP \fBfallocate\fR 4
.IX Item "fallocate"
fallocate [\-o OFS] \-l LEN FILE
.Sp
Preallocate space for FILE
.Sp
.Vb 2
\&        \-o OFS  Offset of range
\&        \-l LEN  Length of range
.Ve
.IP \fBfbset\fR 4
.IX Item "fbset"
fbset [OPTIONS] [MODE]
.Sp
Show and modify frame buffer settings
.IP \fBfdflush\fR 4
.IX Item "fdflush"
fdflush DEVICE
.Sp
Force floppy disk drive to detect disk change
.IP \fBfdformat\fR 4
.IX Item "fdformat"
fdformat [\-n] DEVICE
.Sp
Format floppy disk
.Sp
.Vb 1
\&        \-n      Don\*(Aqt verify after format
.Ve
.IP \fBfdisk\fR 4
.IX Item "fdisk"
fdisk [\-ul] [\-C CYLINDERS] [\-H HEADS] [\-S SECTORS] [\-b SSZ] DISK
.Sp
Change partition table
.Sp
.Vb 6
\&        \-u              Start and End are in sectors (instead of cylinders)
\&        \-l              Show partition table for each DISK, then exit
\&        \-b 2048         (for certain MO disks) use 2048\-byte sectors
\&        \-C CYLINDERS    Set number of cylinders/heads/sectors
\&        \-H HEADS        Typically 255
\&        \-S SECTORS      Typically 63
.Ve
.IP \fBfind\fR 4
.IX Item "find"
find [\-HL] [PATH]... [OPTIONS] [ACTIONS]
.Sp
Search for files and perform actions on them.
First failed action stops processing of current file.
Defaults: PATH is current directory, action is '\-print'
.Sp
.Vb 7
\&        \-L,\-follow      Follow symlinks
\&        \-H              ...on command line only
\&        \-xdev           Don\*(Aqt descend directories on other filesystems
\&        \-maxdepth N     Descend at most N levels. \-maxdepth 0 applies
\&                        actions to command line arguments only
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-depth          Act on directory *after* traversing it
.Ve
.Sp
Actions:
.Sp
.Vb 10
\&        ( ACTIONS )     Group actions for \-o / \-a
\&        ! ACT           Invert ACT\*(Aqs success/failure
\&        ACT1 [\-a] ACT2  If ACT1 fails, stop, else do ACT2
\&        ACT1 \-o ACT2    If ACT1 succeeds, stop, else do ACT2
\&                        Note: \-a has higher priority than \-o
\&        \-name PATTERN   Match file name (w/o directory name) to PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-path PATTERN   Match path to PATTERN
\&        \-ipath PATTERN  Case insensitive \-path
\&        \-regex PATTERN  Match path to regex PATTERN
\&        \-type X         File type is X (one of: f,d,l,b,c,s,p)
\&        \-executable     File is executable
\&        \-perm MASK      At least one mask bit (+MASK), all bits (\-MASK),
\&                        or exactly MASK bits are set in file\*(Aqs mode
\&        \-mtime DAYS     mtime is greater than (+N), less than (\-N),
\&                        or exactly N days in the past
\&        \-atime DAYS     atime +N/\-N/N days in the past
\&        \-ctime DAYS     ctime +N/\-N/N days in the past
\&        \-mmin MINS      mtime is greater than (+N), less than (\-N),
\&                        or exactly N minutes in the past
\&        \-amin MINS      atime +N/\-N/N minutes in the past
\&        \-cmin MINS      ctime +N/\-N/N minutes in the past
\&        \-newer FILE     mtime is more recent than FILE\*(Aqs
\&        \-samefile FILE  File is same as FILE
\&        \-user NAME/ID   File is owned by given user
\&        \-group NAME/ID  File is owned by given group
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.))
\&                        +/\-N: file size is bigger/smaller than N
\&        \-empty          Match empty file/directory
\&        \-prune          If current file is directory, don\*(Aqt descend into it
\&If none of the following actions is specified, \-print is assumed
\&        \-print          Print file name
\&        \-print0         Print file name, NUL terminated
\&        \-exec CMD ARG ; Run CMD with all instances of {} replaced by
\&                        file name. Fails if CMD exits with nonzero
\&        \-exec CMD ARG + Run CMD with {} replaced by list of file names
\&        \-quit           Exit
.Ve
.IP \fBflock\fR 4
.IX Item "flock"
flock [\-sxun] FD | { FILE [\-c] PROG ARGS }
.Sp
[Un]lock file descriptor, or lock FILE, run PROG
.Sp
.Vb 4
\&        \-s      Shared lock
\&        \-x      Exclusive lock (default)
\&        \-u      Unlock FD
\&        \-n      Fail rather than wait
.Ve
.IP \fBfold\fR 4
.IX Item "fold"
fold [\-bs] [\-w WIDTH] [FILE]...
.Sp
Wrap input lines in FILEs (or stdin), writing to stdout
.Sp
.Vb 3
\&        \-b      Count bytes rather than columns
\&        \-s      Break at spaces
\&        \-w      Use WIDTH columns instead of 80
.Ve
.IP \fBfree\fR 4
.IX Item "free"
free [\-bkmgh]
.Sp
Display free and used memory
.IP \fBfreeramdisk\fR 4
.IX Item "freeramdisk"
freeramdisk DEVICE
.Sp
Free all memory used by the specified ramdisk
.IP \fBfsck\fR 4
.IX Item "fsck"
fsck [\-ANPRTV] [\-t FSTYPE] [FS_OPTS] [BLOCKDEV]...
.Sp
Check and repair filesystems
.Sp
.Vb 7
\&        \-A      Walk /etc/fstab and check all filesystems
\&        \-N      Don\*(Aqt execute, just show what would be done
\&        \-P      With \-A, check filesystems in parallel
\&        \-R      With \-A, skip the root filesystem
\&        \-T      Don\*(Aqt show title on startup
\&        \-V      Verbose
\&        \-t TYPE List of filesystem types to check
.Ve
.IP \fBfsfreeze\fR 4
.IX Item "fsfreeze"
fsfreeze \-\-[un]freeze MOUNTPOINT
.Sp
Flush and halt writes to MOUNTPOINT
.IP \fBfstrim\fR 4
.IX Item "fstrim"
fstrim [OPTIONS] MOUNTPOINT
.Sp
.Vb 4
\&        \-o OFFSET       Offset in bytes to discard from
\&        \-l LEN          Bytes to discard
\&        \-m MIN          Minimum extent length
\&        \-v              Print number of discarded bytes
.Ve
.IP \fBfuser\fR 4
.IX Item "fuser"
fuser [\-msk46] [\-SIGNAL] FILE or PORT/PROTO
.Sp
Find processes which use FILEs or PORTs
.Sp
.Vb 5
\&        \-m      Find processes which use same fs as FILEs
\&        \-4,\-6   Search only IPv4/IPv6 space
\&        \-s      Don\*(Aqt display PIDs
\&        \-k      Kill found processes
\&        \-SIGNAL Signal to send (default: KILL)
.Ve
.IP \fBgetopt\fR 4
.IX Item "getopt"
getopt [OPTIONS] [\-\-] OPTSTRING PARAMS
.Sp
.Vb 9
\&        \-a              Allow long options starting with single \-
\&        \-l LOPT[,...]   Long options to recognize
\&        \-n PROGNAME     The name under which errors are reported
\&        \-o OPTSTRING    Short options to recognize
\&        \-q              No error messages on unrecognized options
\&        \-Q              No normal output
\&        \-s SHELL        Set shell quoting conventions
\&        \-T              Version test (exits with 4)
\&        \-u              Don\*(Aqt quote output
.Ve
.Sp
Example:
.Sp
O=`getopt \-l bb: \-\- ab:c:: "$@"` || exit 1
eval set \-\- "$O"
while true; do
	case "$1" in
	\-a)	echo A; shift;;
	\-b|\-\-bb) echo "B:'$2'"; shift 2;;
	\-c)	case "$2" in
		"")	echo C; shift 2;;
		*)	echo "C:'$2'"; shift 2;;
		esac;;
	\-\-)	shift; break;;
	*)	echo Error; exit 1;;
	esac
done
.IP \fBgetty\fR 4
.IX Item "getty"
getty [OPTIONS] BAUD_RATE[,BAUD_RATE]... TTY [TERMTYPE]
.Sp
Open TTY, prompt for login name, then invoke /bin/login
.Sp
.Vb 11
\&        \-h              Enable hardware RTS/CTS flow control
\&        \-L              Set CLOCAL (ignore Carrier Detect state)
\&        \-m              Get baud rate from modem\*(Aqs CONNECT status message
\&        \-n              Don\*(Aqt prompt for login name
\&        \-w              Wait for CR or LF before sending /etc/issue
\&        \-i              Don\*(Aqt display /etc/issue
\&        \-f ISSUE_FILE   Display ISSUE_FILE instead of /etc/issue
\&        \-l LOGIN        Invoke LOGIN instead of /bin/login
\&        \-t SEC          Terminate after SEC if no login name is read
\&        \-I INITSTR      Send INITSTR before anything else
\&        \-H HOST         Log HOST into the utmp file as the hostname
.Ve
.Sp
BAUD_RATE of 0 leaves it unchanged
.IP \fBgrep\fR 4
.IX Item "grep"
grep [\-HhnlLoqvsrRiwFE] [\-m N] [\-A|B|C N] { PATTERN | \-e PATTERN... | \-f FILE... } [FILE]...
.Sp
Search for PATTERN in FILEs (or stdin)
.Sp
.Vb 10
\&        \-H      Add \*(Aqfilename:\*(Aq prefix
\&        \-h      Do not add \*(Aqfilename:\*(Aq prefix
\&        \-n      Add \*(Aqline_no:\*(Aq prefix
\&        \-l      Show only names of files that match
\&        \-L      Show only names of files that don\*(Aqt match
\&        \-c      Show only count of matching lines
\&        \-o      Show only the matching part of line
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress open and read errors
\&        \-r      Recurse
\&        \-R      Recurse and dereference symlinks
\&        \-i      Ignore case
\&        \-w      Match whole words only
\&        \-x      Match whole lines only
\&        \-F      PATTERN is a literal (not regexp)
\&        \-E      PATTERN is an extended regexp
\&        \-m N    Match up to N times per file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Same as \*(Aq\-A N \-B N\*(Aq
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
.Ve
.IP \fBgunzip\fR 4
.IX Item "gunzip"
gunzip [\-cfkt] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBgzip\fR 4
.IX Item "gzip"
gzip [\-cfkdt] [FILE]...
.Sp
Compress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBhalt\fR 4
.IX Item "halt"
halt [\-d DELAY] [\-nfw]
.Sp
Halt the system
.Sp
.Vb 4
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
\&        \-w      Only write a wtmp record
.Ve
.IP \fBhdparm\fR 4
.IX Item "hdparm"
hdparm [OPTIONS] [DEVICE]
.Sp
.Vb 10
\&        \-a      Get/set fs readahead
\&        \-A      Set drive read\-lookahead flag (0/1)
\&        \-b      Get/set bus state (0 == off, 1 == on, 2 == tristate)
\&        \-B      Set Advanced Power Management setting (1\-255)
\&        \-c      Get/set IDE 32\-bit IO setting
\&        \-C      Check IDE power mode status
\&        \-D      Enable/disable drive defect\-mgmt
\&        \-f      Flush buffer cache for device on exit
\&        \-g      Display drive geometry
\&        \-h      Display terse usage information
\&        \-i      Display drive identification
\&        \-I      Detailed/current information directly from drive
\&        \-k      Get/set keep_settings_over_reset flag (0/1)
\&        \-K      Set drive keep_features_over_reset flag (0/1)
\&        \-L      Set drive doorlock (0/1) (removable harddisks only)
\&        \-m      Get/set multiple sector count
\&        \-n      Get/set ignore\-write\-errors flag (0/1)
\&        \-p      Set PIO mode on IDE interface chipset (0,1,2,3,4,...)
\&        \-P      Set drive prefetch count
\&        \-Q      Get/set DMA tagged\-queuing depth (if supported)
\&        \-r      Get/set readonly flag (DANGEROUS to set)
\&        \-S      Set standby (spindown) timeout
\&        \-t      Perform device read timings
\&        \-T      Perform cache read timings
\&        \-u      Get/set unmaskirq flag (0/1)
\&        \-v      Defaults; same as \-mcudkrag for IDE drives
\&        \-V      Display program version and exit immediately
\&        \-W      Set drive write\-caching flag (0/1) (DANGEROUS)
\&        \-X      Set IDE xfer mode (DANGEROUS)
\&        \-y      Put IDE drive in standby mode
\&        \-Y      Put IDE drive to sleep
\&        \-Z      Disable Seagate auto\-powersaving mode
\&        \-z      Reread partition table
.Ve
.IP \fBhead\fR 4
.IX Item "head"
head [OPTIONS] [FILE]...
.Sp
Print first 10 lines of FILEs (or stdin).
With more than one FILE, precede each with a filename header.
.Sp
.Vb 6
\&        \-n N[bkm]       Print first N lines
\&        \-n \-N[bkm]      Print all except N last lines
\&        \-c [\-]N[bkm]    Print first N bytes
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
.Ve
.IP \fBhexdump\fR 4
.IX Item "hexdump"
hexdump [\-bcdoxCv] [\-e FMT] [\-f FMT_FILE] [\-n LEN] [\-s OFS] [FILE]...
.Sp
Display FILEs (or stdin) in a user specified format
.Sp
.Vb 11
\&        \-b              1\-byte octal display
\&        \-c              1\-byte character display
\&        \-d              2\-byte decimal display
\&        \-o              2\-byte octal display
\&        \-x              2\-byte hex display
\&        \-C              hex+ASCII 16 bytes per line
\&        \-v              Show all (no dup folding)
\&        \-e FORMAT_STR   Example: \*(Aq16/1 "%02x|""\en"\*(Aq
\&        \-f FORMAT_FILE
\&        \-n LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
.Ve
.IP \fBhexedit\fR 4
.IX Item "hexedit"
hexedit FILE
.Sp
Edit FILE in hexadecimal
.IP \fBhostid\fR 4
.IX Item "hostid"
hostid
.Sp
Print out a unique 32\-bit identifier for the machine
.IP \fBhostname\fR 4
.IX Item "hostname"
hostname [\-sidf] [HOSTNAME | \-F FILE]
.Sp
Show or set hostname or DNS domain name
.Sp
.Vb 5
\&        \-s      Short
\&        \-i      Addresses for the hostname
\&        \-d      DNS domain name
\&        \-f      Fully qualified domain name
\&        \-F FILE Use FILE\*(Aqs content as hostname
.Ve
.IP \fBhwclock\fR 4
.IX Item "hwclock"
hwclock [\-swul] [\-\-systz] [\-f DEV]
.Sp
Show or set hardware clock (RTC)
.Sp
.Vb 8
\&        \-s      Set system time from RTC
\&        \-w      Set RTC from system time
\&        \-\-systz Set in\-kernel timezone, correct system time
\&                if RTC is kept in local time
\&        \-f DEV  Use specified device (e.g. /dev/rtc2)
\&        \-u      Assume RTC is kept in UTC
\&        \-l      Assume RTC is kept in local time
\&                (if neither is given, read from /var/lib/hwclock/adjtime)
.Ve
.IP \fBi2cdetect\fR 4
.IX Item "i2cdetect"
i2cdetect \-l | \-F I2CBUS | [\-ya] [\-q|\-r] I2CBUS [FIRST LAST]
.Sp
Detect I2C chips
.Sp
.Vb 7
\&        \-l      List installed buses
\&        \-F BUS# List functionalities on this bus
\&        \-y      Disable interactive mode
\&        \-a      Force scanning of non\-regular addresses
\&        \-q      Use smbus quick write commands for probing (default)
\&        \-r      Use smbus read byte commands for probing
\&        FIRST and LAST limit probing range
.Ve
.IP \fBi2cdump\fR 4
.IX Item "i2cdump"
i2cdump [\-fy] [\-r FIRST\-LAST] BUS ADDR [MODE]
.Sp
Examine I2C registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        b       Byte (default)
\&        w       Word
\&        W       Word on even register addresses
\&        i       I2C block
\&        s       SMBus block
\&        c       Consecutive byte
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
\&        \-r      Limit the number of registers being accessed
.Ve
.IP \fBi2cget\fR 4
.IX Item "i2cget"
i2cget [\-fy] BUS CHIP-ADDRESS [DATA\-ADDRESS [MODE]]
.Sp
Read from I2C/SMBus chip registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        b       Read byte data (default)
\&        w       Read word data
\&        c       Write byte/read byte
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
.Ve
.IP \fBi2cset\fR 4
.IX Item "i2cset"
i2cset [\-fy] [\-m MASK] BUS CHIP-ADDRESS DATA-ADDRESS [VALUE] ... [MODE]
.Sp
Set I2C registers
.Sp
.Vb 3
\&        I2CBUS  I2C bus number
\&        ADDRESS 0x03\-0x77
\&MODE is:
\&
\&        c       Byte, no value
\&        b       Byte data (default)
\&        w       Word data
\&        i       I2C block data
\&        s       SMBus block data
\&        Append p for SMBus PEC
\&
\&        \-f      Force access
\&        \-y      Disable interactive mode
\&        \-r      Read back and compare the result
\&        \-m MASK Mask specifying which bits to write
.Ve
.IP \fBi2ctransfer\fR 4
.IX Item "i2ctransfer"
i2ctransfer [\-fay] I2CBUS { rLENGTH[@ADDR] | wLENGTH[@ADDR] DATA...}...
.Sp
Read/write I2C data in one transfer
.Sp
.Vb 3
\&        \-f      Force access to busy addresses
\&        \-a      Force access to non\-regular addresses
\&        \-y      Disable interactive mode
.Ve
.IP \fBid\fR 4
.IX Item "id"
id [\-ugGnr] [USER]
.Sp
Print information about USER or the current user
.Sp
.Vb 5
\&        \-u      User ID
\&        \-g      Group ID
\&        \-G      Supplementary group IDs
\&        \-n      Print names instead of numbers
\&        \-r      Print real ID instead of effective ID
.Ve
.IP \fBifconfig\fR 4
.IX Item "ifconfig"
ifconfig [\-a] [IFACE] [ADDRESS]
.Sp
Configure a network interface
.Sp
.Vb 10
\&        [add ADDRESS[/PREFIXLEN]]
\&        [del ADDRESS[/PREFIXLEN]]
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [outfill NN] [keepalive NN]
\&        [hw ether|infiniband ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [mem_start NN] [io_addr NN] [irq NN]
\&        [up|down] ...
.Ve
.IP \fBifdown\fR 4
.IX Item "ifdown"
ifdown [\-nmvf] [\-i FILE] \-a | IFACE...
.Sp
.Vb 7
\&        \-a      Deconfigure all interfaces
\&        \-i FILE Use FILE instead of /etc/network/interfaces
\&        \-n      Dry run
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force
.Ve
.IP \fBifup\fR 4
.IX Item "ifup"
ifup [\-nmvf] [\-i FILE] \-a | IFACE...
.Sp
.Vb 7
\&        \-a      Configure all interfaces
\&        \-i FILE Use FILE instead of /etc/network/interfaces
\&        \-n      Dry run
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force
.Ve
.IP \fBinetd\fR 4
.IX Item "inetd"
inetd [\-fe] [\-q N] [\-R N] [CONFFILE]
.Sp
Listen for network connections and launch programs
.Sp
.Vb 6
\&        \-f      Run in foreground
\&        \-e      Log to stderr
\&        \-q N    Socket listen queue (default 128)
\&        \-R N    Pause services after N connects/min
\&                (default 0 \- disabled)
\&        Default CONFFILE is /etc/inetd.conf
.Ve
.IP \fBinit\fR 4
.IX Item "init"
init
.Sp
Init is the first process started during boot. It never exits.
It (re)spawns children according to /etc/inittab.
Signals:
.Sp
HUP: reload /etc/inittab
TSTP: stop respawning until CONT
QUIT: re-exec another init
USR1/TERM/USR2/INT: run halt/reboot/poweroff/Ctrl\-Alt\-Del script
.IP \fBinsmod\fR 4
.IX Item "insmod"
insmod FILE [SYMBOL=VALUE]...
.Sp
Load kernel module
.IP \fBinstall\fR 4
.IX Item "install"
install [\-cdDsp] [\-o USER] [\-g GRP] [\-m MODE] [\-t DIR] [SOURCE]... DEST
.Sp
Copy files and set attributes
.Sp
.Vb 9
\&        \-c      Just copy (default)
\&        \-d      Create directories
\&        \-D      Create leading target directories
\&        \-s      Strip symbol table
\&        \-p      Preserve date
\&        \-o USER Set ownership
\&        \-g GRP  Set group ownership
\&        \-m MODE Set permissions
\&        \-t DIR  Install to DIR
.Ve
.IP \fBip\fR 4
.IX Item "ip"
ip [OPTIONS] address|route|link|tunnel|neigh|rule [ARGS]
.Sp
OPTIONS := \-f[amily] inet|inet6|link | \-o[neline]
.Sp
ip addr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]
ip route list|flush|add|del|change|append|replace|test ROUTE
ip link set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster] [netns PID]
ip tunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]
ip neigh show|flush [to PREFIX] [dev DEV] [nud STATE]
ip rule [list] | add|del SELECTOR ACTION
.IP \fBipaddr\fR 4
.IX Item "ipaddr"
ipaddr add|del IFADDR dev IFACE | show|flush [dev IFACE] [to PREFIX]
.Sp
ipaddr add|change|replace|delete dev IFACE [CONFFLAG\-LIST] IFADDR
	IFADDR := PREFIX | ADDR peer PREFIX [broadcast ADDR|+|\-]
		[anycast ADDR] [label STRING] [scope SCOPE]
	PREFIX := ADDR[/MASK]
	SCOPE := [host|link|global|NUMBER]
	CONFFLAG-LIST := [CONFFLAG\-LIST] CONFFLAG
	CONFFLAG := [noprefixroute]
ipaddr show|flush [dev IFACE] [scope SCOPE] [to PREFIX] [label PATTERN]
.IP \fBipcrm\fR 4
.IX Item "ipcrm"
ipcrm [\-MQS key] [\-mqs id]
.Sp
Upper-case options MQS remove an object by shmkey value.
Lower-case options remove an object by shmid value.
.Sp
.Vb 3
\&        \-mM     Remove memory segment after last detach
\&        \-qQ     Remove message queue
\&        \-sS     Remove semaphore
.Ve
.IP \fBipcs\fR 4
.IX Item "ipcs"
ipcs [[\-smq] \-i SHMID] | [[\-asmq] [\-tcplu]]
.Sp
.Vb 2
\&        \-i ID   Show specific resource
\&Resource specification:
\&
\&        \-m      Shared memory segments
\&        \-q      Message queues
\&        \-s      Semaphore arrays
\&        \-a      All (default)
\&Output format:
\&
\&        \-t      Time
\&        \-c      Creator
\&        \-p      Pid
\&        \-l      Limits
\&        \-u      Summary
.Ve
.IP \fBiplink\fR 4
.IX Item "iplink"
iplink set IFACE [up|down] [arp on|off] [multicast on|off]
	[promisc on|off] [mtu NUM] [name NAME] [qlen NUM] [address MAC]
	[master IFACE | nomaster] [netns PID]
iplink add [link IFACE] IFACE [address MAC] type TYPE [ARGS]
iplink delete IFACE type TYPE [ARGS]
	TYPE ARGS := vlan VLANARGS | vrf table NUM
	VLANARGS := id VLANID [protocol 802.1q|802.1ad] [reorder_hdr on|off]
		[gvrp on|off] [mvrp on|off] [loose_binding on|off]
iplink show [IFACE]
.IP \fBipneigh\fR 4
.IX Item "ipneigh"
ipneigh show|flush [to PREFIX] [dev DEV] [nud STATE]
.IP \fBiproute\fR 4
.IX Item "iproute"
iproute list|flush|add|del|change|append|replace|test ROUTE
.Sp
iproute list|flush SELECTOR
	SELECTOR := [root PREFIX] [match PREFIX] [proto RTPROTO]
	PREFIX := default|ADDR[/MASK]
iproute get ADDR [from ADDR iif IFACE]
	[oif IFACE] [tos TOS]
iproute add|del|change|append|replace|test ROUTE
	ROUTE := NODE_SPEC [INFO_SPEC]
	NODE_SPEC := PREFIX [table TABLE_ID] [proto RTPROTO] [scope SCOPE] [metric METRIC]
	INFO_SPEC := NH OPTIONS
	NH := [via [inet|inet6] ADDR] [dev IFACE] [src ADDR] [onlink]
	OPTIONS := [mtu [lock] NUM] [advmss [lock] NUM]
.IP \fBiprule\fR 4
.IX Item "iprule"
iprule [list] | add|del SELECTOR ACTION
.Sp
.Vb 6
\&        SELECTOR := [from PREFIX] [to PREFIX] [tos TOS] [fwmark FWMARK[/MASK]]
\&                        [dev IFACE] [pref NUMBER]
\&        ACTION := [table TABLE_ID] [nat ADDR]
\&                        [prohibit|reject|unreachable]
\&                        [realms [SRCREALM/]DSTREALM]
\&        TABLE_ID := [local|main|default|NUMBER]
.Ve
.IP \fBiptunnel\fR 4
.IX Item "iptunnel"
iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR] [ttl TTL]
.Sp
iptunnel add|change|del|show [NAME]
	[mode ipip|gre|sit] [remote ADDR] [local ADDR]
	[[i|o]seq] [[i|o]key KEY] [[i|o]csum]
	[ttl TTL] [tos TOS] [[no]pmtudisc] [dev PHYS_DEV]
.IP \fBkill\fR 4
.IX Item "kill"
kill [\-l] [\-SIG] PID...
.Sp
Send a signal (default: TERM) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP \fBkillall\fR 4
.IX Item "killall"
killall [\-lq] [\-SIG] PROCESS_NAME...
.Sp
Send a signal (default: TERM) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP \fBkillall5\fR 4
.IX Item "killall5"
killall5 [\-l] [\-SIG] [\-o PID]...
.Sp
Send a signal (default: TERM) to all processes outside current session
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-o PID  Don\*(Aqt signal this PID
.Ve
.IP \fBklogd\fR 4
.IX Item "klogd"
klogd [\-c N] [\-n]
.Sp
Log kernel messages to syslog
.Sp
.Vb 2
\&        \-c N    Print to console messages more urgent than prio N (1\-8)
\&        \-n      Run in foreground
.Ve
.IP \fBlast\fR 4
.IX Item "last"
last
.Sp
Show listing of the last users that logged into the system
.IP \fBless\fR 4
.IX Item "less"
less [\-EFIMmNSRh~] [FILE]...
.Sp
View FILE (or stdin) one screenful at a time
.Sp
.Vb 9
\&        \-E      Quit once the end of a file is reached
\&        \-F      Quit if entire file fits on first screen
\&        \-I      Ignore case in all searches
\&        \-M,\-m   Display status line with line numbers
\&                and percentage through the file
\&        \-N      Prefix line number to each line
\&        \-S      Truncate long lines
\&        \-R      Remove color escape codes in input
\&        \-~      Suppress ~s displayed past EOF
.Ve
.IP \fBlink\fR 4
.IX Item "link"
link FILE LINK
.Sp
Create hard LINK to FILE
.IP \fBln\fR 4
.IX Item "ln"
ln [\-sfnbtv] [\-S SUF] TARGET... LINK|DIR
.Sp
Create a link LINK or DIR/TARGET to the specified TARGET(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S SUF  Use suffix instead of ~ when making backup files
\&        \-T      Treat LINK as a file, not DIR
\&        \-v      Verbose
.Ve
.IP \fBloadfont\fR 4
.IX Item "loadfont"
loadfont < font
.Sp
Load a console font from stdin
.IP \fBloadkmap\fR 4
.IX Item "loadkmap"
loadkmap < keymap
.Sp
Load a binary keyboard translation table from stdin
.IP \fBlogger\fR 4
.IX Item "logger"
logger [\-s] [\-t TAG] [\-p PRIO] [MESSAGE]
.Sp
Write MESSAGE (or stdin) to syslog
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (number or FACILITY.LEVEL pair)
.Ve
.IP \fBlogin\fR 4
.IX Item "login"
login [\-p] [\-h HOST] [[\-f] USER]
.Sp
Begin a new session on the system
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h HOST Host user came from (for network logins)
\&        \-p      Preserve environment
.Ve
.Sp
\&\f(CW$LOGIN_TIMEOUT\fR		Seconds (default 60, 0 \- disable)
.IP \fBlogname\fR 4
.IX Item "logname"
logname
.Sp
Print the name of the current user
.IP \fBlosetup\fR 4
.IX Item "losetup"
losetup [\-rP] [\-o OFS] {\-f|LOOPDEV} FILE: associate loop devices
	losetup \-c LOOPDEV: reread file size
	losetup \-d LOOPDEV: disassociate
	losetup \-a: show status
	losetup \-f: show next free loop device
.Sp
.Vb 4
\&        \-o OFS  Start OFS bytes into FILE
\&        \-P      Scan for partitions
\&        \-r      Read\-only
\&        \-f      Show/use next free loop device
.Ve
.IP \fBls\fR 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinshrSXvctu] [\-w WIDTH] [FILE]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include names starting with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-x      List by lines
\&        \-d      List directory names, not contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to directory names
\&        \-F      Append indicator (one of */=@|) to names
\&        \-l      Long format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-lc     List ctime
\&        \-lu     List atime
\&        \-\-full\-time     List full date/time
\&        \-h      Human readable sizes (1K 243M 2G)
\&        \-\-group\-directories\-first
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-t      Sort by mtime
\&        \-tc     Sort by ctime
\&        \-tu     Sort by atime
\&        \-r      Reverse sort order
\&        \-w N    Format N columns wide
\&        \-\-color[={always,never,auto}]
.Ve
.IP \fBlsattr\fR 4
.IX Item "lsattr"
lsattr [\-Radlpv] [FILE]...
.Sp
List ext2 file attributes
.Sp
.Vb 6
\&        \-R      Recurse
\&        \-a      Include names starting with .
\&        \-d      List directory names, not contents
\&        \-l      List long flag names
\&        \-p      List project ID
\&        \-v      List version/generation number
.Ve
.IP \fBlsmod\fR 4
.IX Item "lsmod"
lsmod
.Sp
List loaded kernel modules
.IP \fBlsof\fR 4
.IX Item "lsof"
lsof
.Sp
Show all open files
.IP \fBlspci\fR 4
.IX Item "lspci"
lspci [\-mk]
.Sp
List all PCI devices
.Sp
.Vb 2
\&        \-m      Parsable output
\&        \-k      Show driver
.Ve
.IP \fBlzcat\fR 4
.IX Item "lzcat"
lzcat [FILE]...
.Sp
Decompress to stdout
.IP \fBlzma\fR 4
.IX Item "lzma"
lzma \-d [\-cfk] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBlzopcat\fR 4
.IX Item "lzopcat"
lzopcat [\-vF] [FILE]...
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-F      Don\*(Aqt verify checksum
.Ve
.IP \fBmakedevs\fR 4
.IX Item "makedevs"
makedevs [\-d device_table] rootdir
.Sp
Create a range of special files as specified in a device table.
Device table entries take the form of:
.Sp
<name> <type> <mode> <uid> <gid> <major> <minor> <start> <inc> <count>
Where name is the file name, type can be one of:
	f	Regular file
	d	Directory
	c	Character device
	b	Block device
	p	Fifo (named pipe)
uid is the user id for the target file, gid is the group id for the
target file. The rest of the entries (major, minor, etc) apply to
to device special files. A '\-' may be used for blank entries.
.IP \fBmd5sum\fR 4
.IX Item "md5sum"
md5sum [\-c[sw]] [FILE]...
.Sp
Print or check MD5 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBmdev\fR 4
.IX Item "mdev"
mdev [\-vS] { [\-s] | [\-df] }
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-S      Log to syslog too
\&        \-s      Scan /sys and populate /dev
\&        \-d      Daemon, listen on netlink
\&        \-f      Run in foreground
.Ve
.Sp
Bare mdev is a kernel hotplug helper. To activate it:
	echo /sbin/mdev >/proc/sys/kernel/hotplug
.Sp
It uses /etc/mdev.conf with lines
	[\-][ENV=regex;]...DEVNAME UID:GID PERM [>|=PATH]|[!] [@|$|*PROG]
where DEVNAME is device name regex, \f(CW@major\fR,minor[\-minor2], or
environment variable regex. A common use of the latter is
to load modules for hotplugged devices:
.Sp
.Vb 1
\&        $MODALIAS=.* 0:0 660 @modprobe "$MODALIAS"
.Ve
.Sp
If /dev/mdev.seq file exists, mdev will wait for its value
to match \f(CW$SEQNUM\fR variable. This prevents plug/unplug races.
To activate this feature, create empty /dev/mdev.seq at boot.
.Sp
If /dev/mdev.log file exists, debug log will be appended to it.
.IP \fBmesg\fR 4
.IX Item "mesg"
mesg [y|n]
.Sp
Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal
.IP \fBmicrocom\fR 4
.IX Item "microcom"
microcom [\-d DELAY_MS] [\-t TIMEOUT_MS ] [\-s SPEED] [\-X] TTY
.Sp
Copy bytes from stdin to TTY and from TTY to stdout
.Sp
.Vb 5
\&        \-d DELAY        Wait up to DELAY ms for TTY output before sending
\&                        every next byte to it
\&        \-t TIMEOUT      Exit if both stdin and TTY are silent for TIMEOUT ms
\&        \-s SPEED        Set serial line to SPEED
\&        \-X              Disable special meaning of NUL and Ctrl\-X from stdin
.Ve
.IP \fBmim\fR 4
.IX Item "mim"
mim [\-f FILE] [SHELL_OPTIONS] [TARGET] ...
.Sp
Run a script from a Makefile-like specification file
.Sp
.Vb 1
\&        \-f FILE         Spec file (default Mimfile)
.Ve
.IP \fBmkdir\fR 4
.IX Item "mkdir"
mkdir [\-m MODE] [\-p] DIRECTORY...
.Sp
Create DIRECTORY
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP \fBmkdosfs\fR 4
.IX Item "mkdosfs"
mkdosfs [\-v] [\-n LABEL] BLOCKDEV [KBYTES]
.Sp
Make a FAT32 filesystem
.Sp
.Vb 2
\&        \-v      Verbose
\&        \-n LBL  Volume label
.Ve
.IP \fBmke2fs\fR 4
.IX Item "mke2fs"
mke2fs [\-Fn] [\-b BLK_SIZE] [\-i INODE_RATIO] [\-I INODE_SIZE] [\-m RESERVED_PERCENT] [\-L LABEL] BLOCKDEV [KBYTES]
.Sp
.Vb 7
\&        \-b BLK_SIZE     Block size, bytes
\&        \-F              Force
\&        \-i RATIO        Max number of files is filesystem_size / RATIO
\&        \-I BYTES        Inode size (min 128)
\&        \-L LBL          Volume label
\&        \-m PERCENT      Percent of blocks to reserve for admin
\&        \-n              Dry run
.Ve
.IP \fBmkfifo\fR 4
.IX Item "mkfifo"
mkfifo [\-m MODE] NAME
.Sp
Create named pipe
.Sp
.Vb 1
\&        \-m MODE Mode (default a=rw)
.Ve
.IP \fBmknod\fR 4
.IX Item "mknod"
mknod [\-m MODE] NAME TYPE [MAJOR MINOR]
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR MINOR must be omitted)
.Ve
.IP \fBmkpasswd\fR 4
.IX Item "mkpasswd"
mkpasswd [\-P FD] [\-m TYPE] [\-S SALT] [PASSWORD] [SALT]
.Sp
Print \fBcrypt\fR\|(3) hashed PASSWORD
.Sp
.Vb 3
\&        \-P N    Read password from fd N
\&        \-m TYPE des,md5,sha256/512 (default md5)
\&        \-S SALT
.Ve
.IP \fBmkswap\fR 4
.IX Item "mkswap"
mkswap [\-L LBL] BLOCKDEV [KBYTES]
.Sp
Prepare BLOCKDEV to be used as swap partition
.Sp
.Vb 1
\&        \-L LBL  Label
.Ve
.IP \fBmktemp\fR 4
.IX Item "mktemp"
mktemp [\-dt] [\-p DIR] [TEMPLATE]
.Sp
Create a temporary file with name based on TEMPLATE and print its name.
TEMPLATE must end with XXXXXX (e.g. [/dir/]nameXXXXXX).
Without TEMPLATE, \-t tmp.XXXXXX is assumed.
.Sp
.Vb 5
\&        \-d      Make directory, not file
\&        \-q      Fail silently on errors
\&        \-t      Prepend base directory name to TEMPLATE
\&        \-p DIR  Use DIR as a base directory (implies \-t)
\&        \-u      Do not create anything; print a name
.Ve
.Sp
Base directory is: \-p DIR, else \f(CW$TMPDIR\fR, else /tmp
.IP \fBmodprobe\fR 4
.IX Item "modprobe"
modprobe [\-alrqvsD] MODULE [SYMBOL=VALUE]...
.Sp
.Vb 7
\&        \-a      Load multiple MODULEs
\&        \-l      List (MODULE is a pattern)
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-s      Log to syslog
\&        \-D      Show dependencies
.Ve
.IP \fBmore\fR 4
.IX Item "more"
more [FILE]...
.Sp
View FILE (or stdin) one screenful at a time
.IP \fBmount\fR 4
.IX Item "mount"
mount [OPTIONS] [\-o OPT] DEVICE NODE
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-r              Read\-only mount
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-T FILE         Read FILE instead of /etc/fstab
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro              Same as \-r
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP \fBmountpoint\fR 4
.IX Item "mountpoint"
mountpoint [\-q] { [\-dn] DIR | \-x DEVICE }
.Sp
Check if DIR is a mountpoint
.Sp
.Vb 4
\&        \-q      Quiet
\&        \-d      Print major:minor of the filesystem
\&        \-n      Print device name of the filesystem
\&        \-x      Print major:minor of DEVICE
.Ve
.IP \fBmt\fR 4
.IX Item "mt"
mt [\-f DEVICE] OPCODE VALUE
.Sp
Control magnetic tape drive operation
.Sp
Opcodes:
.Sp
bsf bsfm bsr bss datacompression drvbuffer eof eom erase
fsf fsfm fsr fss load lock mkpart nop offline ras1 ras2
ras3 reset retension rewind rewoffline seek setblk setdensity
setpart tell unload unlock weof wset
.IP \fBmv\fR 4
.IX Item "mv"
mv [\-finT] SOURCE DEST
or: mv [\-fin] SOURCE... { \-t DIRECTORY | DIRECTORY }
.Sp
Rename SOURCE to DEST, or move SOURCEs to DIRECTORY
.Sp
.Vb 5
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
\&        \-T      Refuse to move if DEST is a directory
\&        \-t DIR  Move all SOURCEs into DIR
.Ve
.IP \fBnameif\fR 4
.IX Item "nameif"
nameif [\-s] [\-c FILE] [IFNAME HWADDR]...
.Sp
Rename network interface while it in the down state.
The device with address HWADDR is renamed to IFNAME.
.Sp
.Vb 2
\&        \-c FILE Configuration file (default: /etc/mactab)
\&        \-s      Log to syslog
.Ve
.IP \fBnetstat\fR 4
.IX Item "netstat"
netstat [\-ral] [\-tuwx] [\-en]
.Sp
Display networking information
.Sp
.Vb 11
\&        \-r      Routing table
\&        \-a      All sockets
\&        \-l      Listening sockets
\&                Else: connected sockets
\&        \-t      TCP sockets
\&        \-u      UDP sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&                Else: all socket types
\&        \-e      Other/more information
\&        \-n      Don\*(Aqt resolve names
.Ve
.IP \fBnice\fR 4
.IX Item "nice"
nice [\-n ADJUST] [PROG ARGS]
.Sp
Change scheduling priority, run PROG
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP \fBnl\fR 4
.IX Item "nl"
nl [OPTIONS] [FILE]...
.Sp
Write FILEs to standard output with line numbers added
.Sp
.Vb 5
\&        \-b STYLE        Which lines to number \- a: all, t: nonempty, n: none
\&        \-i N            Line number increment
\&        \-s STRING       Use STRING as line number separator
\&        \-v N            Start from N
\&        \-w N            Width of line numbers
.Ve
.IP \fBnohup\fR 4
.IX Item "nohup"
nohup PROG ARGS
.Sp
Run PROG immune to hangups, with output to a non-tty
.IP \fBnologin\fR 4
.IX Item "nologin"
nologin
.Sp
Politely refuse a login
.IP \fBnproc\fR 4
.IX Item "nproc"
nproc [\-\-all] [\-\-ignore=N]
.Sp
Print number of available CPUs
.Sp
.Vb 2
\&        \-\-all           Number of installed CPUs
\&        \-\-ignore=N      Exclude N CPUs
.Ve
.IP \fBnslookup\fR 4
.IX Item "nslookup"
nslookup [\-type=QUERY_TYPE] [\-debug] HOST [DNS_SERVER]
.Sp
Query DNS about HOST
.Sp
QUERY_TYPE: soa,ns,a,aaaa,cname,mx,txt,ptr,srv,any
.IP \fBnuke\fR 4
.IX Item "nuke"
nuke DIR...
.Sp
Remove DIRs
.IP \fBod\fR 4
.IX Item "od"
od [\-abcdfhilovxs] [\-t TYPE] [\-A RADIX] [\-N SIZE] [\-j SKIP] [\-S MINSTR] [\-w WIDTH] [FILE]...
.Sp
Print FILEs (or stdin) unambiguously, as octal bytes by default
.IP \fBopenvt\fR 4
.IX Item "openvt"
openvt [\-c N] [\-sw] [PROG ARGS]
.Sp
Start PROG on a new virtual terminal
.Sp
.Vb 3
\&        \-c N    Use specified VT
\&        \-s      Switch to the VT
\&        \-w      Wait for PROG to exit
.Ve
.IP \fBpartprobe\fR 4
.IX Item "partprobe"
partprobe DEVICE...
.Sp
Ask kernel to rescan partition table
.IP \fBpasswd\fR 4
.IX Item "passwd"
passwd [\-a ALG] [\-dlu] [USER]
.Sp
Change USER's password (default: current user)
.Sp
.Vb 4
\&        \-a ALG  des,md5,sha256/512 (default md5)
\&        \-d      Set password to \*(Aq\*(Aq
\&        \-l      Lock (disable) account
\&        \-u      Unlock (enable) account
.Ve
.IP \fBpaste\fR 4
.IX Item "paste"
paste [\-d LIST] [\-s] [FILE]...
.Sp
Paste lines from each input file, separated with tab
.Sp
.Vb 2
\&        \-d LIST Use delimiters from LIST, not tab
\&        \-s      Serial: one file at a time
.Ve
.IP \fBpatch\fR 4
.IX Item "patch"
patch [\-RNE] [\-p N] [\-i DIFF] [ORIGFILE [PATCHFILE]]
.Sp
.Vb 6
\&        \-p N    Strip N leading components from file names
\&        \-i DIFF Read DIFF instead of stdin
\&        \-R      Reverse patch
\&        \-N      Ignore already applied patches
\&        \-E      Remove output files if they become empty
\&        \-\-dry\-run       Don\*(Aqt actually change files
.Ve
.IP \fBpidof\fR 4
.IX Item "pidof"
pidof [\-s] [\-o PID] [NAME]...
.Sp
List PIDs of all processes with names that match NAMEs
.Sp
.Vb 3
\&        \-s      Show only one PID
\&        \-o PID  Omit given pid
\&                Use %PPID to omit pid of pidof\*(Aqs parent
.Ve
.IP \fBping\fR 4
.IX Item "ping"
ping [OPTIONS] HOST
.Sp
Send ICMP ECHO_REQUESTs to HOST
.Sp
.Vb 12
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default 56)
\&        \-i SECS         Interval
\&        \-A              Ping as soon as reply is received
\&        \-t TTL          Set TTL
\&        \-I IFACE/IP     Source interface or IP address
\&        \-W SEC          Seconds to wait for the first response (default 10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only display output at start/finish
\&        \-p HEXBYTE      Payload pattern
.Ve
.IP \fBpivot_root\fR 4
.IX Item "pivot_root"
pivot_root NEW_ROOT PUT_OLD
.Sp
Move the current root file system to PUT_OLD and make NEW_ROOT
the new root file system
.IP \fBpoweroff\fR 4
.IX Item "poweroff"
poweroff [\-d DELAY] [\-nf]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP \fBprintenv\fR 4
.IX Item "printenv"
printenv [VARIABLE]...
.Sp
Print environment VARIABLEs.
If no VARIABLE specified, print all.
.IP \fBprintf\fR 4
.IX Item "printf"
printf FORMAT [ARG]...
.Sp
Format and print ARG(s) according to FORMAT (a\-la C printf)
.IP \fBps\fR 4
.IX Item "ps"
ps [\-o COL1,COL2=HEADER]
.Sp
Show list of processes
.Sp
.Vb 1
\&        \-o COL1,COL2=HEADER     Select columns for display
.Ve
.IP \fBpwd\fR 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP \fBrdate\fR 4
.IX Item "rdate"
rdate [\-s/\-p] HOST
.Sp
Set and print time from HOST using RFC 868
.Sp
.Vb 2
\&        \-s      Only set system time
\&        \-p      Only print time
.Ve
.IP \fBreadlink\fR 4
.IX Item "readlink"
readlink [\-fnv] FILE
.Sp
Display the value of a symlink
.Sp
.Vb 3
\&        \-f      Canonicalize by following all symlinks
\&        \-n      Don\*(Aqt add newline
\&        \-v      Verbose
.Ve
.IP \fBreadprofile\fR 4
.IX Item "readprofile"
readprofile [OPTIONS]
.Sp
.Vb 10
\&        \-m MAPFILE      (Default: /boot/System.map)
\&        \-p PROFILE      (Default: /proc/profile)
\&        \-M NUM          Set the profiling multiplier to NUM
\&        \-i              Print only info about the sampling step
\&        \-v              Verbose
\&        \-a              Print all symbols, even if count is 0
\&        \-b              Print individual histogram\-bin counts
\&        \-s              Print individual counters within functions
\&        \-r              Reset all the counters (root only)
\&        \-n              Disable byte order auto\-detection
.Ve
.IP \fBrealpath\fR 4
.IX Item "realpath"
realpath FILE...
.Sp
Print absolute pathnames of FILEs
.IP \fBreboot\fR 4
.IX Item "reboot"
reboot [\-d DELAY] [\-nf]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP \fBrenice\fR 4
.IX Item "renice"
renice [\-n] PRIORITY [[\-p|g|u] ID...]...
.Sp
Change scheduling priority of a running process
.Sp
.Vb 5
\&        \-n      Add PRIORITY to current nice value
\&                Without \-n, nice value is set to PRIORITY
\&        \-p      Process ids (default)
\&        \-g      Process group ids
\&        \-u      Process user names
.Ve
.IP \fBreset\fR 4
.IX Item "reset"
reset
.Sp
Reset terminal (ESC codes) and termios (signals, buffering, echo)
.IP \fBresize\fR 4
.IX Item "resize"
resize
.Sp
Resize the screen
.IP \fBresume\fR 4
.IX Item "resume"
resume BLOCKDEV [OFFSET]
.Sp
Restore system state from 'suspend\-to\-disk' data in BLOCKDEV
.IP \fBrm\fR 4
.IX Item "rm"
rm [\-irf] FILE...
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP \fBrmdir\fR 4
.IX Item "rmdir"
rmdir [\-p] DIRECTORY...
.Sp
Remove DIRECTORY if it is empty
.Sp
.Vb 2
\&        \-p      Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP \fBrmmod\fR 4
.IX Item "rmmod"
rmmod [\-wfa] [MODULE]...
.Sp
Unload kernel modules
.Sp
.Vb 3
\&        \-w      Wait until the module is no longer used
\&        \-f      Force unload
\&        \-a      Remove all unused modules (recursively)
.Ve
.IP \fBroute\fR 4
.IX Item "route"
route [\-ne] [\-A inet[6]] [{add|del} [\-net|\-host] TARGET [netmask MASK]
	[gw GATEWAY] [metric N] [mss BYTES] [window BYTES] [reject] [IFACE]]
.Sp
Show or edit kernel routing tables
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet[6]      Select address family
.Ve
.IP \fBrun-init\fR 4
.IX Item "run-init"
run-init [\-d CAP,CAP...] [\-n] [\-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]
.Sp
Free initramfs and switch to another root fs:
.Sp
chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.
.Sp
.Vb 3
\&        \-c DEV  Reopen stdio to DEV after switch
\&        \-d CAPS Drop capabilities
\&        \-n      Dry run
.Ve
.IP \fBrun-parts\fR 4
.IX Item "run-parts"
run-parts [\-a ARG]... [\-u UMASK] [\-\-reverse] [\-\-test] [\-\-exit\-on\-error] DIRECTORY
.Sp
Run a bunch of scripts in DIRECTORY
.Sp
.Vb 5
\&        \-a ARG          Pass ARG as argument to scripts
\&        \-u UMASK        Set UMASK before running scripts
\&        \-\-reverse       Reverse execution order
\&        \-\-test          Dry run
\&        \-\-exit\-on\-error Exit if a script exits with non\-zero
.Ve
.IP \fBrunlevel\fR 4
.IX Item "runlevel"
runlevel [FILE]
.Sp
Find the current and previous system runlevel
.Sp
If no utmp FILE exists or if no runlevel record can be found,
print "unknown"
.IP \fBsed\fR 4
.IX Item "sed"
sed [\-i[SFX]] [\-nrE] [\-f FILE]... [\-e CMD]... [FILE]...
or: sed [\-i[SFX]] [\-nrE] CMD [FILE]...
.Sp
.Vb 6
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i[SFX] Edit files in\-place (otherwise write to stdout)
\&                Optionally back files up, appending SFX
\&        \-n      Suppress automatic printing of pattern space
\&        \-r,\-E   Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP \fBseedrng\fR 4
.IX Item "seedrng"
seedrng [\-d DIR] [\-n]
.Sp
Seed the kernel RNG from seed files
.Sp
.Vb 2
\&        \-d DIR  Use seed files in DIR (default: /var/lib/seedrng)
\&        \-n      Do not credit randomness, even if creditable
.Ve
.IP \fBseq\fR 4
.IX Item "seq"
seq [\-w] [\-s SEP] [FIRST [INC]] LAST
.Sp
Print numbers from FIRST to LAST, in steps of INC.
FIRST, INC default to 1.
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP \fBsetarch\fR 4
.IX Item "setarch"
setarch PERSONALITY [\-R] PROG ARGS
.Sp
PERSONALITY may be:
.Sp
.Vb 2
\&        linux32 Set 32bit uname emulation
\&        linux64 Set 64bit uname emulation
\&
\&        \-R      Disable address space randomization
.Ve
.IP \fBsetconsole\fR 4
.IX Item "setconsole"
setconsole [\-r] [DEVICE]
.Sp
Make writes to /dev/console appear on DEVICE (default: /dev/tty).
Does not redirect kernel log output or reads from /dev/console.
.Sp
.Vb 1
\&        \-r      Reset: writes to /dev/console go to kernel log tty(s)
.Ve
.IP \fBsetfattr\fR 4
.IX Item "setfattr"
setfattr [\-h] \-n|\-x ATTR [\-v VALUE] FILE...
.Sp
Set extended attributes
.Sp
.Vb 4
\&        \-h              Do not follow symlinks
\&        \-x ATTR         Remove attribute ATTR
\&        \-n ATTR         Set attribute ATTR to VALUE
\&        \-v VALUE        (default: empty)
.Ve
.IP \fBsetkeycodes\fR 4
.IX Item "setkeycodes"
setkeycodes { SCANCODE KEYCODE }...
.Sp
Modify kernel's scancode-to-keycode map,
allowing unusual keyboards to generate usable keycodes.
.Sp
SCANCODE is either xx or e0xx (hexadecimal), KEYCODE is decimal.
.IP \fBsetlogcons\fR 4
.IX Item "setlogcons"
setlogcons [N]
.Sp
Pin kernel output to VT console N. Default:0 (do not pin)
.IP \fBsetpriv\fR 4
.IX Item "setpriv"
setpriv [OPTIONS] PROG ARGS
.Sp
Run PROG with different privilege settings
.Sp
\&\-d,\-\-dump		Show current capabilities
\&\-\-nnp,\-\-no\-new\-privs	Ignore setuid/setgid bits and file capabilities
\&\-\-inh\-caps CAP,CAP	Set inheritable capabilities
\&\-\-ambient\-caps CAP,CAP	Set ambient capabilities
.IP \fBsetserial\fR 4
.IX Item "setserial"
setserial [\-abGvz] { DEVICE [PARAMETER [ARG]]... | \-g DEVICE... }
.Sp
Print or set serial port parameters
.Sp
.Vb 6
\&        \-a      Print all
\&        \-b      Print summary
\&        \-G      Print as setserial PARAMETERs
\&        \-v      Verbose
\&        \-z      Zero out serial flags before setting
\&        \-g      All args are device names
.Ve
.Sp
PARAMETERs: (* = takes ARG, ^ = can be turned off by preceding ^)
	*port, *irq, *divisor, *uart, *baud_base, *close_delay, *closing_wait,
	^fourport, ^auto_irq, ^skip_test, ^sak, ^session_lockout, ^pgrp_lockout,
	^callout_nohup, ^split_termios, ^hup_notify, ^low_latency, autoconfig,
	spd_normal, spd_hi, spd_vhi, spd_shi, spd_warp, spd_cust
ARG for uart:
.Sp
.Vb 3
\&        unknown, 8250, 16450, 16550, 16550A, Cirrus, 16650, 16650V2, 16750,
\&        16950, 16954, 16654, 16850, RSA, NS16550A, XSCALE, RM9000, OCTEON, AR7,
\&        U6_16550A
.Ve
.IP \fBsetsid\fR 4
.IX Item "setsid"
setsid [\-c] PROG ARGS
.Sp
Run PROG in a new session. PROG will have no controlling terminal
and will not be affected by keyboard signals (^C etc).
.Sp
.Vb 1
\&        \-c      Set controlling terminal to stdin
.Ve
.IP \fBsh\fR 4
.IX Item "sh"
sh [\-il] [\-|+Cabefmnuvx] [\-|+o OPT]... [\-c 'SCRIPT' [ARG0 ARGS] | FILE ARGS | \-s ARGS]
.Sp
Unix shell interpreter
.IP \fBsha1sum\fR 4
.IX Item "sha1sum"
sha1sum [\-c[sw]] [FILE]...
.Sp
Print or check SHA1 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBsha256sum\fR 4
.IX Item "sha256sum"
sha256sum [\-c[sw]] [FILE]...
.Sp
Print or check SHA256 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBsha3sum\fR 4
.IX Item "sha3sum"
sha3sum [\-c[sw]] [\-a BITS] [FILE]...
.Sp
Print or check SHA3 checksums
.Sp
.Vb 4
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
\&        \-a BITS 224 (default), 256, 384, 512
.Ve
.IP \fBsha512sum\fR 4
.IX Item "sha512sum"
sha512sum [\-c[sw]] [FILE]...
.Sp
Print or check SHA512 checksums
.Sp
.Vb 3
\&        \-c      Check sums against list in FILEs
\&        \-s      Don\*(Aqt output anything, status code shows success
\&        \-w      Warn about improperly formatted checksum lines
.Ve
.IP \fBshred\fR 4
.IX Item "shred"
shred [\-fuz] [\-n N] [\-s SIZE] FILE...
.Sp
Overwrite/delete FILEs
.Sp
.Vb 5
\&        \-f      Chmod to ensure writability
\&        \-s SIZE Size to write
\&        \-n N    Overwrite N times (default 3)
\&        \-z      Final overwrite with zeros
\&        \-u      Remove file
.Ve
.IP \fBsleep\fR 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP \fBsort\fR 4
.IX Item "sort"
sort [\-nrughMcszbdfiokt] [\-o FILE] [\-k START[.OFS][OPTS][,END[.OFS][OPTS]] [\-t CHAR] [FILE]...
.Sp
Sort lines of text
.Sp
.Vb 10
\&        \-o FILE Output to FILE
\&        \-c      Check whether input is sorted
\&        \-b      Ignore leading blanks
\&        \-f      Ignore case
\&        \-i      Ignore unprintable characters
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-n      Sort numbers
\&        \-g      General numerical sort
\&        \-h      Sort human readable numbers (2K 1G)
\&        \-M      Sort month
\&        \-V      Sort version
\&        \-t CHAR Field separator
\&        \-k N[,M] Sort by Nth field
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      NUL terminated input and output
.Ve
.IP \fBstart-stop-daemon\fR 4
.IX Item "start-stop-daemon"
start-stop-daemon [OPTIONS] [\-S|\-K] ... [\-\- ARGS...]
.Sp
Search for matching processes, and then
\&\-K: stop all matching processes
\&\-S: start a process unless a matching process is found
.Sp
Process matching:
.Sp
.Vb 10
\&        \-u USERNAME|UID Match only this user\*(Aqs processes
\&        \-n NAME         Match processes with NAME
\&                        in comm field in /proc/PID/stat
\&        \-x EXECUTABLE   Match processes with this command
\&                        in /proc/PID/cmdline
\&        \-p FILE         Match a process with PID from FILE
\&        All specified conditions must match
\&\-S only:
\&        \-x EXECUTABLE   Program to run
\&        \-a NAME         Zeroth argument
\&        \-b              Background
\&        \-N N            Change nice level
\&        \-c USER[:[GRP]] Change user/group
\&        \-m              Write PID to pidfile specified by \-p
\&\-K only:
\&        \-s SIG          Signal to send
\&        \-t              Match only, exit with 0 if found
\&Other:
\&
\&        \-o              Exit with status 0 if nothing is done
\&        \-v              Verbose
\&        \-q              Quiet
.Ve
.IP \fBstrings\fR 4
.IX Item "strings"
strings [\-fo] [\-t o|d|x] [\-n LEN] [FILE]...
.Sp
Display printable strings in a binary file
.Sp
.Vb 4
\&        \-f              Precede strings with filenames
\&        \-o              Precede strings with octal offsets
\&        \-t o|d|x        Precede strings with offsets in base 8/10/16
\&        \-n LEN          At least LEN characters form a string (default 4)
.Ve
.IP \fBstty\fR 4
.IX Item "stty"
stty [\-a|g] [\-F DEVICE] [SETTING]...
.Sp
Without arguments, prints baud rate, line discipline,
and deviations from stty sane
.Sp
.Vb 4
\&        \-F DEVICE       Open device instead of stdin
\&        \-a              Print all current settings in human\-readable form
\&        \-g              Print in stty\-readable form
\&        [SETTING]       See manpage
.Ve
.IP \fBsu\fR 4
.IX Item "su"
su [\-lmp] [\-s SH] [\-] [USER [FILE ARGS | \-c 'CMD' [ARG0 ARGS]]]
.Sp
Run shell under USER (by default, root)
.Sp
.Vb 4
\&        \-,\-l    Clear environment, go to home dir, run shell as login shell
\&        \-p,\-m   Do not set new $HOME, $SHELL, $USER, $LOGNAME
\&        \-c CMD  Command to pass to \*(Aqsh \-c\*(Aq
\&        \-s SH   Shell to use instead of user\*(Aqs default
.Ve
.IP \fBsulogin\fR 4
.IX Item "sulogin"
sulogin [\-t N] [TTY]
.Sp
Single user login
.Sp
.Vb 2
\&        \-p      Start a login shell
\&        \-t SEC  Timeout
.Ve
.IP \fBsvc\fR 4
.IX Item "svc"
svc [\-udopchaitkx] SERVICE_DIR...
.Sp
Control services monitored by runsv supervisor
.Sp
.Vb 5
\&        \-u      If service is not running, start it; restart if it stops
\&        \-d      If service is running, send TERM+CONT signals; do not restart it
\&        \-o      Once: if service is not running, start it; do not restart it
\&        \-pchaitk Send STOP, CONT, HUP, ALRM, INT, TERM, KILL signal to service
\&        \-x      Exit: runsv will exit as soon as the service is down
.Ve
.IP \fBsvok\fR 4
.IX Item "svok"
svok SERVICE_DIR
.Sp
Check whether runsv supervisor is running.
Exit code is 0 if it does, 100 if it does not,
111 (with error message) if SERVICE_DIR does not exist.
.IP \fBswapoff\fR 4
.IX Item "swapoff"
swapoff [\-a] [DEVICE]
.Sp
Stop swapping on DEVICE
.Sp
.Vb 1
\&        \-a      Stop swapping on all swap devices
.Ve
.IP \fBswapon\fR 4
.IX Item "swapon"
swapon [\-a] [\-e] [DEVICE]
.Sp
Start swapping on DEVICE
.Sp
.Vb 2
\&        \-a      Start swapping on all swap devices
\&        \-e      Silently skip devices that do not exist
.Ve
.IP \fBswitch_root\fR 4
.IX Item "switch_root"
switch_root [\-c CONSOLE_DEV] NEW_ROOT NEW_INIT [ARGS]
.Sp
Free initramfs and switch to another root fs:
.Sp
chroot to NEW_ROOT, delete all in /, move NEW_ROOT to /,
execute NEW_INIT. PID must be 1. NEW_ROOT must be a mountpoint.
.Sp
.Vb 1
\&        \-c DEV  Reopen stdio to DEV after switch
.Ve
.IP \fBsync\fR 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP \fBsysctl\fR 4
.IX Item "sysctl"
sysctl [\-enq] { \-a | \-p [FILE]... | [\-w] [KEY[=VALUE]]... }
.Sp
Show/set kernel parameters
.Sp
.Vb 6
\&        \-e      Don\*(Aqt warn about unknown keys
\&        \-n      Don\*(Aqt show key names
\&        \-q      Quiet
\&        \-a      Show all values
\&        \-p      Set values from FILEs (default /etc/sysctl.conf)
\&        \-w      Set values
.Ve
.IP \fBsyslogd\fR 4
.IX Item "syslogd"
syslogd [OPTIONS]
.Sp
System logging utility
(this version of syslogd ignores /etc/syslog.conf)
.Sp
.Vb 9
\&        \-n              Run in foreground
\&        \-R HOST[:PORT]  Log to HOST:PORT (default PORT:514)
\&        \-L              Log locally and via network (default is network only if \-R)
\&        \-O FILE         Log to FILE (default: /var/log/messages, stdout if \-)
\&        \-s SIZE         Max size (KB) before rotation (default 200KB, 0=off)
\&        \-b N            N rotated logs to keep (default 1, max 99, 0=purge)
\&        \-l N            Log only messages more urgent than prio N (1\-8)
\&        \-S              Smaller output
\&        \-t              Strip client\-generated timestamps
.Ve
.IP \fBtail\fR 4
.IX Item "tail"
tail [OPTIONS] [FILE]...
.Sp
Print last 10 lines of FILEs (or stdin) to.
With more than one FILE, precede each with a filename header.
.Sp
.Vb 9
\&        \-c [+]N[bkm]    Print last N bytes
\&        \-n N[bkm]       Print last N lines
\&        \-n +N[bkm]      Start on Nth line and print the rest
\&                        (b:*512 k:*1024 m:*1024^2)
\&        \-q              Never print headers
\&        \-v              Always print headers
\&        \-f              Print data as file grows
\&        \-F              Same as \-f, but keep retrying
\&        \-s SECONDS      Wait SECONDS between reads with \-f
.Ve
.IP \fBtar\fR 4
.IX Item "tar"
tar c|x|t [\-ahvokO] [\-f TARFILE] [\-C DIR] [\-T FILE] [\-X FILE] [LONGOPT]... [FILE]...
.Sp
Create, extract, or list files from a tar file
.Sp
.Vb 10
\&        c       Create
\&        x       Extract
\&        t       List
\&        \-f FILE Name of TARFILE (\*(Aq\-\*(Aq for stdin/out)
\&        \-C DIR  Change to DIR before operation
\&        \-v      Verbose
\&        \-O      Extract to stdout
\&        \-o      Don\*(Aqt restore user:group
\&        \-k      Don\*(Aqt replace existing files
\&        \-a      (De)compress based on extension
\&        \-h      Follow symlinks
\&        \-T FILE File with names to include
\&        \-X FILE File with glob patterns to exclude
\&        \-\-exclude PATTERN       Glob pattern to exclude
\&        \-\-overwrite             Replace existing files
\&        \-\-strip\-components NUM  NUM of leading components to strip
\&        \-\-no\-recursion          Don\*(Aqt descend in directories
\&        \-\-numeric\-owner         Use numeric user:group
\&        \-\-no\-same\-permissions   Don\*(Aqt restore access permissions
\&        \-\-to\-command COMMAND    Pipe files to COMMAND
.Ve
.IP \fBtee\fR 4
.IX Item "tee"
tee [\-ai] [FILE]...
.Sp
Copy stdin to each FILE, and also to stdout
.Sp
.Vb 2
\&        \-a      Append to the given FILEs, don\*(Aqt overwrite
\&        \-i      Ignore interrupt signals (SIGINT)
.Ve
.IP \fBtelnet\fR 4
.IX Item "telnet"
telnet [\-a] [\-l USER] HOST [PORT]
.Sp
Connect to telnet server
.Sp
.Vb 2
\&        \-a      Automatic login with $USER variable
\&        \-l USER Automatic login as USER
.Ve
.IP \fBtftp\fR 4
.IX Item "tftp"
tftp [OPTIONS] HOST [PORT]
.Sp
Transfer a file from/to tftp server
.Sp
.Vb 5
\&        \-l FILE Local FILE
\&        \-r FILE Remote FILE
\&        \-g      Get file
\&        \-p      Put file
\&        \-b SIZE Transfer blocks in bytes
.Ve
.IP \fBtime\fR 4
.IX Item "time"
time [\-vpa] [\-o FILE] PROG ARGS
.Sp
Run PROG, display resource usage when it exits
.Sp
.Vb 5
\&        \-v      Verbose
\&        \-p      POSIX output format
\&        \-f FMT  Custom format
\&        \-o FILE Write result to FILE
\&        \-a      Append (else overwrite)
.Ve
.IP \fBtop\fR 4
.IX Item "top"
top [\-b] [\-n COUNT] [\-d SECONDS]
.Sp
Show a view of process activity in real time.
Read the status of all processes from /proc each SECONDS
and show a screenful of them.
Keys:
.Sp
.Vb 4
\&        N/M/P/T: sort by pid/mem/cpu/time
\&        R: reverse sort
\&        Q,^C: exit
\&Options:
\&
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d SEC  Delay between updates
.Ve
.IP \fBtouch\fR 4
.IX Item "touch"
touch [\-cham] [\-d DATE] [\-t DATE] [\-r FILE] FILE...
.Sp
Update mtime of FILEs
.Sp
.Vb 7
\&        \-c      Don\*(Aqt create files
\&        \-h      Don\*(Aqt follow links
\&        \-a      Change only atime
\&        \-m      Change only mtime
\&        \-d DT   Date/time to use
\&        \-t DT   Date/time to use
\&        \-r FILE Use FILE\*(Aqs date/time
.Ve
.IP \fBtr\fR 4
.IX Item "tr"
tr [\-cds] STRING1 [STRING2]
.Sp
Translate, squeeze, or delete characters from stdin, writing to stdout
.Sp
.Vb 3
\&        \-c      Take complement of STRING1
\&        \-d      Delete input characters coded STRING1
\&        \-s      Squeeze multiple output characters of STRING2 into one character
.Ve
.IP \fBtraceroute\fR 4
.IX Item "traceroute"
traceroute [\-Flnrv] [\-f 1ST_TTL] [\-m MAXTTL] [\-q PROBES] [\-p PORT]
	[\-t TOS] [\-w WAIT_SEC] [\-s SRC_IP] [\-i IFACE]
	[\-z PAUSE_MSEC] HOST [BYTES]
.Sp
Trace the route to HOST
.Sp
.Vb 10
\&        \-F      Set don\*(Aqt fragment bit
\&        \-l      Display TTL value of the returned packet
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-f N    First number of hops (default 1)
\&        \-m N    Max number of hops
\&        \-q N    Number of probes per hop (default 3)
\&        \-p N    Base UDP port number used in probes
\&                (default 33434)
\&        \-s IP   Source address
\&        \-i IFACE Source interface
\&        \-t N    Type\-of\-service in probe packets (default 0)
\&        \-w SEC  Wait for a response (default 3)
\&        \-z MSEC Wait before each send
.Ve
.IP \fBtruncate\fR 4
.IX Item "truncate"
truncate [\-c] \-s SIZE FILE...
.Sp
Truncate FILEs to SIZE
.Sp
.Vb 2
\&        \-c      Do not create files
\&        \-s SIZE
.Ve
.IP \fBts\fR 4
.IX Item "ts"
ts [\-is] [STRFTIME]
.Sp
Pipe stdin to stdout, add timestamp to each line
.Sp
.Vb 2
\&        \-s      Time since start
\&        \-i      Time since previous line
.Ve
.IP \fBtsort\fR 4
.IX Item "tsort"
tsort [FILE]
.Sp
Topological sort
.IP \fBtty\fR 4
.IX Item "tty"
tty [\-s]
.Sp
Print file name of stdin's terminal
.Sp
.Vb 1
\&        \-s      Print nothing, only return exit status
.Ve
.IP \fBubirename\fR 4
.IX Item "ubirename"
ubirename UBI_DEVICE OLD_VOLNAME NEW_VOLNAME [OLD2 NEW2]...
.Sp
Rename UBI volumes on UBI_DEVICE
.IP \fBudhcpc\fR 4
.IX Item "udhcpc"
udhcpc [\-fbqRB] [\-a[MSEC]] [\-t N] [\-T SEC] [\-A SEC|\-n]
	[\-i IFACE] [\-s PROG] [\-p PIDFILE]
	[\-oC] [\-r IP] [\-V VENDOR] [\-F NAME] [\-x OPT:VAL]... [\-O OPT]...
.Sp
.Vb 10
\&        \-i IFACE        Interface to use (default eth0)
\&        \-s PROG         Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
\&        \-p FILE         Create pidfile
\&        \-B              Request broadcast replies
\&        \-t N            Send up to N discover packets (default 3)
\&        \-T SEC          Pause between packets (default 3)
\&        \-A SEC          Wait if lease is not obtained (default 20)
\&        \-b              Background if lease is not obtained
\&        \-n              Exit if lease is not obtained
\&        \-q              Exit after obtaining lease
\&        \-R              Release IP on exit
\&        \-f              Run in foreground
\&        \-S              Log to syslog too
\&        \-a[MSEC]        Validate offered address with ARP ping
\&        \-r IP           Request this IP address
\&        \-o              Don\*(Aqt request any options (unless \-O is given)
\&        \-O OPT          Request option OPT from server (cumulative)
\&        \-x OPT:VAL      Include option OPT in sent packets (cumulative)
\&                        Examples of string, numeric, and hex byte opts:
\&                        \-x hostname:bbox \- option 12
\&                        \-x lease:3600 \- option 51 (lease time)
\&                        \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&                        \-x 14:\*(Aq"dumpfile"\*(Aq \- option 14 (shell\-quoted)
\&        \-F NAME         Ask server to update DNS mapping for NAME
\&        \-V VENDOR       Vendor identifier (default \*(Aqudhcp VERSION\*(Aq)
\&        \-C              Don\*(Aqt send MAC as client identifier
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP \fBuevent\fR 4
.IX Item "uevent"
uevent [PROG ARGS]
.Sp
uevent runs PROG for every netlink notification.
PROG's environment contains data passed from the kernel.
Typical usage (daemon for dynamic device node creation):
	# uevent mdev & mdev \-s
.IP \fBumount\fR 4
.IX Item "umount"
umount [\-rlfda] [\-t FSTYPE] FILESYSTEM|DIRECTORY
.Sp
Unmount filesystems
.Sp
.Vb 6
\&        \-a      Unmount all filesystems
\&        \-r      Remount devices read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-d      Free loop device if it has been used
\&        \-t FSTYPE[,...] Unmount only these filesystem type(s)
.Ve
.IP \fBuname\fR 4
.IX Item "uname"
uname [\-amnrspvio]
.Sp
Print system information
.Sp
.Vb 9
\&        \-a      Print all
\&        \-m      Machine (hardware) type
\&        \-n      Hostname
\&        \-r      Kernel release
\&        \-s      Kernel name (default)
\&        \-p      Processor type
\&        \-v      Kernel version
\&        \-i      Hardware platform
\&        \-o      OS name
.Ve
.IP \fBuniq\fR 4
.IX Item "uniq"
uniq [\-cduiz] [\-f,s,w N] [FILE [OUTFILE]]
.Sp
Discard duplicate lines
.Sp
.Vb 8
\&        \-c      Prefix lines by the number of occurrences
\&        \-d      Only print duplicate lines
\&        \-u      Only print unique lines
\&        \-i      Ignore case
\&        \-z      NUL terminated output
\&        \-f N    Skip first N fields
\&        \-s N    Skip first N chars (after any skipped fields)
\&        \-w N    Compare N characters in line
.Ve
.IP \fBunix2dos\fR 4
.IX Item "unix2dos"
unix2dos [\-ud] [FILE]
.Sp
Convert FILE in-place from Unix to DOS format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP \fBunlink\fR 4
.IX Item "unlink"
unlink FILE
.Sp
Delete FILE by calling \fBunlink()\fR
.IP \fBunlzma\fR 4
.IX Item "unlzma"
unlzma [\-cfk] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBunlzop\fR 4
.IX Item "unlzop"
unlzop [\-cfUvF] [FILE]...
.Sp
.Vb 6
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-U      Delete input files
\&        \-t      Test integrity
\&        \-v      Verbose
\&        \-F      Don\*(Aqt verify checksum
.Ve
.IP \fBunxz\fR 4
.IX Item "unxz"
unxz [\-cfk] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBunzip\fR 4
.IX Item "unzip"
unzip [\-lnojpqK] FILE[.zip] [FILE]... [\-x FILE]... [\-d DIR]
.Sp
Extract FILEs from ZIP archive
.Sp
.Vb 10
\&        \-l      List contents (with \-q for short form)
\&        \-n      Never overwrite files (default: ask)
\&        \-o      Overwrite
\&        \-j      Do not restore paths
\&        \-p      Write to stdout
\&        \-t      Test
\&        \-q      Quiet
\&        \-K      Do not clear SUID bit
\&        \-x FILE Exclude FILEs
\&        \-d DIR  Extract into DIR
.Ve
.IP \fBuptime\fR 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP \fBusleep\fR 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP \fBuudecode\fR 4
.IX Item "uudecode"
uudecode [\-o OUTFILE] [INFILE]
.Sp
Uudecode a file
Finds OUTFILE in uuencoded source unless \-o is given
.IP \fBuuencode\fR 4
.IX Item "uuencode"
uuencode [\-m] [FILE] STORED_FILENAME
.Sp
Uuencode FILE (or stdin) to stdout
.Sp
.Vb 1
\&        \-m      Use base64 encoding per RFC1521
.Ve
.IP \fBvconfig\fR 4
.IX Item "vconfig"
vconfig COMMAND [OPTIONS]
.Sp
Create and remove virtual ethernet devices
.Sp
.Vb 6
\&        add IFACE VLAN_ID
\&        rem VLAN_NAME
\&        set_flag IFACE 0|1 VLAN_QOS
\&        set_egress_map VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_ingress_map VLAN_NAME SKB_PRIO VLAN_QOS
\&        set_name_type NAME_TYPE
.Ve
.IP \fBvi\fR 4
.IX Item "vi"
vi [\-c CMD] [\-R] [\-H] [FILE]...
.Sp
Edit FILE
.Sp
.Vb 3
\&        \-c CMD  Initial command to run ($EXINIT and ~/.exrc also available)
\&        \-R      Read\-only
\&        \-H      List available features
.Ve
.IP \fBvlock\fR 4
.IX Item "vlock"
vlock [\-a]
.Sp
Lock a virtual terminal. A password is required to unlock.
.Sp
.Vb 1
\&        \-a      Lock all VTs
.Ve
.IP \fBw\fR 4
.IX Item "w"
w
.Sp
Show who is logged on
.IP \fBwatch\fR 4
.IX Item "watch"
watch [\-n SEC] [\-t] PROG ARGS
.Sp
Run PROG periodically
.Sp
.Vb 2
\&        \-n SEC  Period (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP \fBwatchdog\fR 4
.IX Item "watchdog"
watchdog [\-t N[ms]] [\-T N[ms]] [\-F] DEV
.Sp
Periodically write to watchdog device DEV
.Sp
.Vb 3
\&        \-T N    Reboot after N seconds if not reset (default 60)
\&        \-t N    Reset every N seconds (default 30)
\&        \-F      Run in foreground
.Ve
.Sp
Use 500ms to specify period in milliseconds
.IP \fBwc\fR 4
.IX Item "wc"
wc [\-clwL] [FILE]...
.Sp
Count lines, words, and bytes for FILEs (or stdin)
.Sp
.Vb 4
\&        \-c      Count bytes
\&        \-l      Count newlines
\&        \-w      Count words
\&        \-L      Print longest line length
.Ve
.IP \fBwget\fR 4
.IX Item "wget"
wget [\-cqS] [\-\-spider] [\-O FILE] [\-o LOGFILE] [\-\-header STR]
	[\-\-post\-data STR | \-\-post\-file FILE] [\-Y on/off]
	[\-P DIR] [\-U AGENT] [\-T SEC] URL...
.Sp
Retrieve files via HTTP or FTP
.Sp
.Vb 10
\&        \-\-spider        Only check URL existence: $? is 0 if exists
\&        \-\-header STR    Add STR (of form \*(Aqheader: value\*(Aq) to headers
\&        \-\-post\-data STR Send STR using POST method
\&        \-\-post\-file FILE        Send FILE using POST method
\&        \-c              Continue retrieval of aborted transfer
\&        \-q              Quiet
\&        \-P DIR          Save to DIR (default .)
\&        \-S              Show server response
\&        \-T SEC          Network read timeout is SEC seconds
\&        \-O FILE         Save to FILE (\*(Aq\-\*(Aq for stdout)
\&        \-o LOGFILE      Log messages to FILE
\&        \-U STR          Use STR for User\-Agent header
\&        \-Y on/off       Use proxy
.Ve
.IP \fBwhich\fR 4
.IX Item "which"
which [\-a] COMMAND...
.Sp
Locate COMMAND
.Sp
.Vb 1
\&        \-a      Show all matches
.Ve
.IP \fBwho\fR 4
.IX Item "who"
who [\-aH]
.Sp
Show who is logged on
.Sp
.Vb 2
\&        \-a      Show all
\&        \-H      Print column headers
.Ve
.IP \fBwhoami\fR 4
.IX Item "whoami"
whoami
.Sp
Print the user name associated with the current effective user id
.IP \fBxargs\fR 4
.IX Item "xargs"
xargs [OPTIONS] [PROG ARGS]
.Sp
Run PROG on every item given by stdin
.Sp
.Vb 11
\&        \-0      NUL terminated input
\&        \-a FILE Read from FILE instead of stdin
\&        \-o      Reopen stdin as /dev/tty
\&        \-r      Don\*(Aqt run command if input is empty
\&        \-t      Print the command on stderr before execution
\&        \-E STR,\-e[STR]  STR stops input processing
\&        \-I STR  Replace STR within PROG ARGS with input line
\&        \-n N    Pass no more than N args to PROG
\&        \-s N    Pass command line of no more than N bytes
\&        \-P N    Run up to N PROGs in parallel
\&        \-x      Exit if size is exceeded
.Ve
.IP \fBxxd\fR 4
.IX Item "xxd"
xxd [\-pri] [\-g N] [\-c N] [\-l LEN] [\-s OFS] [\-o OFS] [FILE]
.Sp
Hex dump FILE (or stdin)
.Sp
.Vb 8
\&        \-g N            Bytes per group
\&        \-c N            Bytes per line
\&        \-p              Show only hex bytes, assumes \-c30
\&        \-i              C include file style
\&        \-l LENGTH       Show only first LENGTH bytes
\&        \-s OFFSET       Skip OFFSET bytes
\&        \-o OFFSET       Add OFFSET to displayed offset
\&        \-r              Reverse (with \-p, assumes no offsets in input)
.Ve
.IP \fBxz\fR 4
.IX Item "xz"
xz \-d [\-cfk] [FILE]...
.Sp
Decompress FILEs (or stdin)
.Sp
.Vb 5
\&        \-d      Decompress
\&        \-c      Write to stdout
\&        \-f      Force
\&        \-k      Keep input files
\&        \-t      Test integrity
.Ve
.IP \fBxzcat\fR 4
.IX Item "xzcat"
xzcat [FILE]...
.Sp
Decompress to stdout
.IP \fByes\fR 4
.IX Item "yes"
yes [STRING]
.Sp
Repeatedly print a line with STRING, or 'y'
.IP \fBzcat\fR 4
.IX Item "zcat"
zcat [FILE]...
.Sp
Decompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
GNU Libc (glibc) uses the Name Service Switch (NSS) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of NSS.  Some applets however, such as login and su, will use libc functions
that require NSS.
.PP
If you enable CONFIG_USE_BB_PWD_GRP, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using NSS.  This may allow you to run your system without the need for
installing any of the NSS configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc NSS stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any NSS support files or libraries.
.SH MAINTAINER
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH AUTHORS
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
.PP
.Vb 1
\&    run\-parts
.Ve
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa III <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve
